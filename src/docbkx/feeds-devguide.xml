<?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE book [
<!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash "&#x2013;">
        <!ENTITY mdash "&#x2014;">
        <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
        
        <!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
        <!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">
        <!ENTITY ENDPOINT-UK-20 "https://lon.identity.api.rackspacecloud.com/v2.0/">
]>
<book xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="feeds-devguide"
    version="5.0-extension RaxBook-2.0">
    <?rax title.font.size="35px" subtitle.font.size="20px"?>
    <title>Rackspace Cloud Feeds Developer Guide</title>
    <?rax status.bar.text.font.size="40px"
          status.bar.text="Early Availability"?>  
    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>Rackspace Cloud</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2014</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v1.0</releaseinfo>
        <productname>Rackspace Cloud Feeds</productname>
        <pubdate/>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the
                    template.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This document is intended for software developers
                interested in developing applications using the
                Rackspace Cloud Feeds Application Programming
                Interface (<abbrev>API</abbrev>). </para>
        </abstract>
        <revhistory>
            <revision>
                <date>2013-10-01</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Published the initial internal
                                release of the Cloud Feeds API
                                Guide.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
        </revhistory>
        <raxm:metadata
            xmlns:raxm="http://docs.rackspace.com/api/metadata">
            <raxm:displayname>API Developer Guide</raxm:displayname>
            <raxm:product version="v1.0">feeds</raxm:product>
            <raxm:priority>20</raxm:priority>
        </raxm:metadata>
    </info>
    <chapter xml:id="overview">
        <title>Overview</title>
        <para>Rackspace Cloud Feeds enables customers on the public cloud to access near real-time
            usage and system events that can be used for analysis, monitoring, and automation. The
            purpose of this document is explain how to access feeds by using the Cloud Feeds API.
            Cloud Feeds uses the following technologies:</para>
        <itemizedlist spacing="compact">
            <listitem>
                <para>Atom Hopper (for more information see, <link
                        xlink:href="http://atomhopper.org">Atom Hopper
                    </link></para>
            </listitem>
            <listitem>
                <para>Apache Abdera (for more information see, <link
                        xlink:href="http://abdera.apache.org">Apache
                        Abdera</link>)</para>
            </listitem>
            <listitem>
                <para>RFC 5023 (for more information see, <link
                        xlink:href="http://www.ietf.org/rfc/rfc5023.txt"
                        >RFC 5023</link>)</para>
            </listitem>
            <listitem>
                <para>RC 5005 (for more information see,<link
                        xlink:href="http://www.ietf.org/rfc/rfc5005.txt"
                        >RC 5005</link> )</para>
            </listitem>
            <listitem>
                <para>RESTful web services (for more information see,
                        <link
                        xlink:href="http://en.wikipedia.org/wiki/Representational_state_transfer"
                        >RESTful web services</link>)</para>
            </listitem>
            <listitem>
                <para>HTTP/1.1 protocol (for more information see,
                        <link
                        xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616.html"
                        >HTTP/1.1 protocol</link>)</para>
            </listitem>
            <listitem>
                <para>JSON and XML data serialization formats (for
                    more information see, <link
                        xlink:href="http://docs.dhtmlx.com/gantt/desktop__serialization.html"
                        >JSON and XML</link>)</para>
            </listitem>
            <listitem>
                <para>Atom Syndication Format RFC 4287 (for more
                    information see, <link
                        xlink:href="http://www.rfc-base.org/rfc-4287.html"
                        >JRFC 4287</link></para>
            </listitem>
        </itemizedlist>
        <section xml:id="Document_Change_History">
            <title>Document Change History</title>
            <para>This version of the guide replaces and obsoletes all previous versions. The most
                recent changes are described in the table below:</para>
            <?rax revhistory?>
        </section>
        <section xml:id="Additional_Resources">
            <title>Additional Resources</title>
            <para>For detailed information about getting started with
                the API, see the <citetitle>Cloud Feeds Getting
                    Started Guide</citetitle> at <link
                    xlink:href="http://docs.rackspace.com/"
                    >http://docs.rackspace.com/</link> All you need to
                start using Cloud Feeds is the Getting Started guide,
                the developer guide, your Rackspace Cloud account, and
                at least one cloud server.</para>
            <para>Visit the <link
                    xlink:href="http://feedback.rackspacecloud.com/forums/71021-product-feedback/category/42449-cloud-databases"
                    >Product Feedback Forum</link> to let us know what
                you think about Cloud Feeds.</para>
            <para>You can also follow Rackspace updates and
                announcements via Twitter at: <link
                    xlink:href="http://www.twitter.com/rackspace"
                    >http://www.twitter.com/rackspace</link>. </para>
            <para>This API uses standard HTTP/1.1 response codes as
                documented at: <link
                    xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
                    >http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</link>.
            </para>
        </section>
        <section xml:id="Pricing_SLA-d1e1362">
            <title>Pricing and Service Level</title>
            <para>Pricing and service level agreement (SLA)
                information for Cloud Feeds is as follows:</para>
            <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">Pricing</emphasis>:
                        Currently, Cloud feeds is available at no cost
                        for Rackspace service admins who are using the
                        public cloud. </para>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">SLA</emphasis>: The
                        Cloud Feeds SLA is for publishers and
                        subscribers. The SLA provides a support model
                        that uses Nova as the first product to send
                        events through Cloud Feeds.</para>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">Uptime</emphasis>: The
                        uptime goal for Cloud Feeds is 99.999 percent.
                        If Cloud Feeds is down, all publishers must
                        continue to hold their events until Cloud
                        Feeds is back up. Publishers must queue events
                        for a minimum of two days.</para>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">Performance
                            Requirements (Projected
                        Volume)</emphasis>: For projected estimates,
                        see <link
                            xlink:href="https://docs.google.com/spreadsheet/ccc?key=0AovJFX0OgO9cdGJwUlNNbzhvcmhhSFgxUjcyX21qanc#gid=3"
                            >projected and actual values</link>. In
                        September 2013 Cloud Feeds needs to handle
                        POSTs and GETs at 500 entries per second. The
                        goal for 2013 is two million entries per hour.
                    </para>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">Performance
                            SLAs</emphasis>: For Cloud Feeds
                        performance SLAs, see <link
                            xlink:href="https://one.rackspace.com/display/CIT/Atom+Hopper+Testing+and+Performance+Metrics"
                            >Testing and performance metrics</link>. </para>
                </listitem>
            </itemizedlist>
            <para>The following table lists the performance for API
                requests for the Cloud Feeds API.</para>
            <table rules="all">
                <caption>Performance SLAs</caption>
                <col width="25%"/>
                <col width="25%"/>
                <col width="25%"/>
                <col width="25%"/>
                <thead>
                    <tr>
                        <th>Request</th>
                        <th>Payload</th>
                        <th>Response Times in Seconds</th>
                        <th>Entries per Second</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>POST with a random number categories that
                            contain 50 threads</td>
                        <td>One entry size at 2.5 KB</td>
                        <td>0.15</td>
                        <td>329.71</td>
                    </tr>
                    <tr>
                        <td>GET</td>
                        <td>First GET request for a page with a size
                            of 1,000 pages with category</td>
                        <td>26.24</td>
                        <td>None</td>
                    </tr>
                    <tr>
                        <td>GET</td>
                        <td>First GET request for a page with a page
                            size of 1,000 pages, without category</td>
                        <td>11.45</td>
                        <td>None</td>
                    </tr>
                    <tr>
                        <td>GET</td>
                        <td>Feed head (25) with search category</td>
                        <td>21.70</td>
                        <td>65.76</td>
                    </tr>
                    <tr>
                        <td>GET</td>
                        <td>Paging through a feed, with a search
                            category and a limit of 1,000 </td>
                        <td>6.37</td>
                        <td>157.74</td>
                    </tr>
                    <tr>
                        <td>GET</td>
                        <td>Paging through feed, without a search
                            category and limit of 1,000</td>
                        <td>5.91</td>
                        <td>166.67</td>
                    </tr>
                    <tr>
                        <td>GET</td>
                        <td>Paging through feed, feed head (25) with
                            search category</td>
                        <td>0.36</td>
                        <td>None</td>
                    </tr>
                </tbody>
            </table>
            <table rules="all">
                <caption>Combined Traffic Performance with 5M entries
                    and a random number of categories:</caption>
                <col width="33%"/>
                <col width="33%"/>
                <col width="33%"/>
                <thead>
                    <tr>
                        <th>Item</th>
                        <th>Average Responses (per second)</th>
                        <th>Throughput (number of entries per
                            second)</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>POST five million entries</td>
                        <td>0.09</td>
                        <td>543.18</td>
                    </tr>
                    <tr>
                        <td>GET (1,000) with category</td>
                        <td>22.42</td>
                        <td>4.95</td>
                    </tr>
                    <tr>
                        <td>Paging through</td>
                        <td>8.29</td>
                        <td>104.40</td>
                    </tr>
                </tbody>
            </table>
        </section>
    </chapter>
    <chapter xml:id="Using_Cloud_Feeds">
        <title>Using Cloud Feeds</title>
        <para>To use Cloud Feeds you need to have a basic
            understanding of REST APIs. In this section you will learn
            how to use the Cloud Feeds REST API to perform basic API
            operations.</para>
        <section xml:id="Adding_a_New_Atom_Entry-d1e1303" security="internal">
            <title>Adding a new Atom event</title>
            <para>You can use a <command>POST </command>request to insert new Atom entries into Atom
                Hopper. To insert a new Atom event in a feed you first need to create an Atom entry
                and save it in the same directory where you are making your request from.</para>
                <para>You then make a <command>POST</command> request with the specified feed URL
                and a pointer to the Atom entry you want to submit using the following
                syntax:</para>
                <para>
                    <programlisting>curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" -H "Content-Type: application/atom+xml" -X POST https://<replaceable>endpointURL</replaceable>/<replaceable>feedName</replaceable>/events –d@<replaceable>inputFile </replaceable></programlisting>
                </para>
                <para>&lt;<emphasis role="italic">inputFile</emphasis>> specifies the path to a file
                    that contains an atom entry. </para>
                <para>The following example shows what a payload for an Atom entry can look like. </para>
                <programlisting language="xml"><xi:include href="./samples/reqAddNewAtomEntry.xml" parse="text"/></programlisting>
                <para>The following example shows how to add a new Atom entry by providing a pointer
                    to the entry:</para>
                <para>
                    <programlisting>curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" -H "Content-Type: application/atom+xml" -X POST https://atom.staging.ord1.us.ci.rackspace.net/files/events –d@./cloudfiles-bandwidth-usage.xml</programlisting>
                </para>
                <para>
                    <important>
                        <para>When making the <command>POST</command> request, make sure to set the
                        HTTP Header to <emphasis>Content-Type: application/atom+xml
                        </emphasis></para>
                    </important>
                </para>
                <para>After you have successfully posted the Atom XML to the correct endpoint you
                    will receive an <code>HTTP 201</code> status code as a response. The response
                    body contains the Atom XML you posted in the request body, as well as category
                    information for the entry, as shown in the following example:</para>
                <programlisting language="xml"><xi:include href="./samples/resAddNewAtomEntry.xml" parse="text"/></programlisting>
                <para>You will notice when the Atom feed is returned that each Atom entry has a
                self-referencing link. The appearance of your self-referencing Atom entry links
                varies depending on whether you use an HTTPS <command>POST</command> request or
                not</para>
                <para>With an HTTPS <command>POST</command> request, the link looks as
                follows:<programlisting>&lt;link href="https://atom.staging.ord1.us.ci.rackspace.net/namespace/feed/events/entries/urn:uuid:9b850562-d357-4cf8-8811-048a6730e869" rel="self" />
</programlisting></para>
        <section xml:id="Adding_one-or-more-categories-d1e1305">
            <title>Adding One or More Categories</title>
            <para>The <emphasis role="italic">category</emphasis> element provides category
                    information for a feed and is case sensitive. The category XML element can
                    appear anywhere as children of the atom:entry XML element. To add categories to
                    an Atom entry you must include the category element along with a term attribute
                    as shown here:</para>
            <programlisting>&lt;category term="mycategory1" /></programlisting>
            <para>You can also add multiple categories using the following syntax:</para>
            <programlisting>&lt;category term="mycategory1" />
&lt;category term="mycategory2" /></programlisting>
            <note>
                <para> Category tags are case sensitive. The <emphasis
                        role="bold">category term</emphasis> attribute
                    has a maximum length of 256 characters. </para>
            </note>
        </section>
        </section>
        <section xml:id="Get_Atom_Entry">
            <title>Reading a feed</title>
            <para>To retrieve an Atom feed or an Atom entry that was posted, submit a
                    <command>GET</command> request using the following syntax:</para>
            <para>
                <programlisting security="external">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://<replaceable>endpointURL</replaceable>/<replaceable>feedName/</replaceable>events/<replaceable>tenantID</replaceable></programlisting>
                <programlisting security="internal">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://<replaceable>endpointURL</replaceable>/<replaceable>feedName/</replaceable>events</programlisting>
            </para>
            <para>The placeholders are defined in the following table.</para>
            <para>
                <table>
                    <caption>Syntax elements</caption>
                    <col width="30%"/>
                    <col width="70%"/>
                    <thead>
                        <tr align="left">
                            <td>Placeholder</td>
                            <td>Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr align="left">
                            <td><emphasis role="italic">authenticationToken</emphasis></td>
                            <td>Specifies the token that you obtain during authentication.</td>
                        </tr>
                        <tr align="left">
                            <td><emphasis role="italic">endpointURL</emphasis></td>
                            <td>Specifies the URL/VIP that was obtained from the list of Cloud Feeds
                                endpoints.</td>
                        </tr>
                        <tr align="left">
                            <td><emphasis role="italic">feedName</emphasis></td>
                            <td>Specifies he name of the feeds you are trying to fetch events for.
                                An example of feed name is: nova, servers, queues, files, etc.</td>
                        </tr>
                        <tr align="left" security="external">
                            <td><emphasis role="italic">tenantID</emphasis></td>
                            <td>Specifies the tenantID for the given tenant.</td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para>The following is an example for a request for a feed:</para>
            <para>
                <programlisting security="external">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://dfw.feeds.api.rackspacecloud.com/nova/events/<replaceable>tenantID</replaceable></programlisting>
                <programlisting security="internal">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://atom.staging.ord1.us.ci.rackspace.net/nova/events</programlisting>
            </para>
            <para>This request returns 25 of the latest events in the Next Generation Cloud Server
                feed from the DFW data center. To make the formatting of the returned events more
                readable, you can submit the following request:</para>
            <para>
                <programlisting security="external">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://dfw.feeds.api.rackspacecloud.com/nova/events/<replaceable>tenantID</replaceable> | xmllint --format -</programlisting>
                <programlisting security="internal">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://atom.staging.ord1.us.ci.rackspace.net/nova/events | xmllint --format -</programlisting>
            </para>
            <note>
                <para>Control and illegal characters must be escaped in the URL.</para>
            </note>
        </section>
            <section xml:id="Navigating_through_feeds">
                <title>Navigating through feeds</title>
            <para>A successful response to a <command>GET</command> request to obtain a feed returns
                links that help you navigate to the Atom entries of your feed. The following are the
                links returned in the Cloud Feeds responses:</para>
            <itemizedlist>
                <listitem>
                    <para>The <emphasis role="bold">current</emphasis> links to the feed.</para>
                </listitem>
                <listitem>
                    <para>Use the <emphasis role="bold">last</emphasis> links to go to the last page
                        of Atom entries in the database for the specified feed. This can be useful
                        for finding the first Atom entry ever inserted for a given feed. Note that
                        Cloud Feeds uses a mock last link marker. This helps move some of the
                        heavier queries off the feed head call.</para>
                </listitem>
                <listitem>
                    <para>Use the <emphasis role="bold">self</emphasis> link to bring back the entry
                        that you are currently viewing. Note that in the example above, the feeds
                        are being hit with no options; as a result, if any new Atom entries have
                        been entered, then those will appear as well.</para>
                </listitem>
                <listitem>
                    <para>Use the <emphasis role="bold">next</emphasis> link to navigate by page to
                        the next page of Atom entries. When you get to the end of the feed, this
                        link will not be present.</para>
                </listitem>
                <listitem>
                    <para>Use the <emphasis role="bold">previous</emphasis> link to navigate by page
                        to the previous page of Atom entries. Sometimes the link is in the feed
                        header; however, the link will not be in the feed header if the feed is
                        empty. If you are at the top of the feed and you follow this link, an empty
                        feed is returned unless new entries have occurred since you last polled. In
                        a feed, the entries are shown in order from newest to oldest. </para>
                    <para>The following diagram shows how pagination works with Cloud Feeds:</para>
                </listitem>
            </itemizedlist>
            <informalfigure>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/CloudFeedsAtomHopper.png" contentwidth="6in"/>
                    </imageobject>
                </mediaobject>
            </informalfigure>
            <important xmlns:svg="http://www.w3.org/2000/svg"
                xmlns:m="http://www.w3.org/1998/Math/MathML"
                xmlns:html="http://www.w3.org/1999/xhtml">
                <para>When viewed in a web browser or web tool such as Chrome Poster, each <emphasis
                        role="bold">&amp;</emphasis> characters in a link returns as an HTML
                    ampersand character code. To follow the link in a web browser or web tool such
                    as Poster, you must change each HTML ampersand character (&amp;amp;) to
                        <emphasis role="bold">&amp;</emphasis>. For example, when viewed in a web
                    browser, the feed returns the following link: </para>
            </important>
            <programlisting>&lt;link href="https://ord.feeds.api.rackspacecloud.com/namespace/feed/events/?marker=urn:uuid:676f3860-447c-40a3-8f61-9791819cc82f&amp;amp;limit=25&amp;amp;search=&amp;amp;direction=forward" rel="previous" />
</programlisting>
            <para>To follow the link from a web browser, you must change each instance of &amp;amp;
                to &amp;, as shown in the following example. The &amp;amp in this example</para>
            <programlisting>https://ord.feeds.api.rackspacecloud.com/namespace/feed//events/?marker=urn:uuid:676f3860-447c-40a3-8f61-9791819cc82f&amp;amp;limit=25&amp;amp;search=&amp;amp;direction=forward
</programlisting>
            <para>must be changed to: </para>
            <programlisting>https://ord.feeds.api.rackspacecloud.com/namespace/feed/events/?marker=urn:uuid:676f3860-447c-40a3-8f61-9791819cc82f&amp;limit=25&amp;search=&amp;direction=forward
</programlisting>
            <para>This issue should not be a concern when using an XML Parser. </para></section>
            <section xml:id="Cloud_Query_Pardle0001">
            <title>Cloud Feeds query parameters</title>
            <para>You can use query parameters to customize the entries and their order within a
                feed. Query parameters are part of the URL that is passed to the server as part of
                an API request. When you add query parameters to an API request, you modify the
                results in ways, such as refining your query or sorting the output. </para>
            <para>A typical URL that contains a query parameter looks like the following:</para>
            <para><code>http://server/program/path/?query_string</code></para>
            <para>The query string is composed of one or more field value pairs using the following
                format:</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Within each field value pair, the field name and value are separated
                            by an equals sign (<emphasis role="italic">=</emphasis>).</para>
                    </listitem>
                    <listitem>
                        <para>The series of pairs is separated by and ampersand (&amp;) as shown in
                            the following example:</para>
                        <para><code>field1=value1&amp;field2=value2&amp;field3=value3...</code></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>The following table summarizes the query parameters you can specify for Cloud
                Feeds:</para>
            <para>
                <table>
                    <caption>Query parameters</caption>
                    <col width="15%"/>
                    <col width="34%"/>
                    <col width="51%"/>
                    <thead>
                        <tr>
                            <th>Query parameter</th>
                            <th>Description</th>
                            <th>Acceptable values</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><parameter>marker</parameter></td>
                            <td>Specifies a uuid that exists in the Cloud Feeds system.</td>
                            <td>Must be a valid uuid that exists in the Cloud Feeds, system, for
                                example
                                <code>rn:uuid:cd42141b-c030-6fca-6704-8285789a274b</code>.</td>
                        </tr>
                        <tr>
                            <td><parameter>direction</parameter></td>
                            <td>Specifies the direction from which to return entries starting from
                                the current marker or entry.</td>
                            <td>Can be either <code>forward</code> or <code>backward</code>.</td>
                        </tr>
                        <tr>
                            <td><parameter>limit</parameter></td>
                            <td>Specifies the number of entries to be returned. If the entered limit
                                is greater than the actual number of entries, the actual number of
                                entries will be used.</td>
                            <td>Must be an integer between 1 and 1000 inclusive.</td>
                        </tr>
                        <tr>
                            <td><parameter>search</parameter></td>
                            <td>Allows filtering of a feed only for events of a specified
                                category.</td>
                            <td>See the <link linkend="Filter_Entries_by_Category_d1e1315">Filtering
                                    entries by category</link> section.</td>
                        </tr>
                        <tr>
                            <td><parameter>startingAt</parameter></td>
                            <td>Allows filtering for a number of entries that start at a specified
                                timestamp.</td>
                            <td>Must be in ISO 8601 Date and Time format, and must contain a time
                                zone, for example: 2014-03-10T06:00:00.000Z. For more information,
                                see <link xlink:href="http://en.wikipedia.org/wiki/ISO_8601"
                                    >http://en.wikipedia.org/wiki/ISO_8601</link>.</td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para>
                <note>
                    <para>The <parameter>startingAt</parameter> parameter can not be used together
                        with the <parameter>marker</parameter> parameter. If the
                            <parameter>startingAt</parameter> parameter is used without a
                            <parameter>direction</parameter> parameter, then forward direction is
                        assumed.</para>
                </note>
            </para>
        </section>
        <section
            xml:id="Select_Entries_by_Marker_and_Forward_and_Backward_Paging-d1e1311">
            <title>Filtering entries by the using the marker parameter </title>
            <para>You can use the <parameter>marker</parameter> parameter to denote an entry that
                you have previously used. If you specify a marker in the <command>GET</command>
                request, you can also specify a value for the <parameter>direction</parameter>
                parameter. The value is either <code>forward</code> or <code>backward</code>. If you
                do not specify a value for the <parameter>direction</parameter> parameter, the
                default value of <code>forward</code> is used. </para>
            <para>The following example shows a <parameter>marker</parameter> parameter specified
                and the <parameter>direction</parameter> parameter set to
                    <parameter>forward</parameter>.</para>
            <para>
                <programlisting>https://atom.myserver.com/feedname/events/?marker=urn:uuid:8439541b-b40e-4c23-b290-2820bd64257d&amp;direction=forward </programlisting>
            </para>
            <para>The following example shows a <parameter>marker</parameter> parameter specified
                and the <parameter>direction</parameter> parameter set to
                    <parameter>backward</parameter>.</para>
            <para>
                <programlisting>https://atom.myserver.com/feedname/events/?marker=urn:uuid:8439541b-b40e-4c23-b290-2820bd64257d&amp;direction=backward
</programlisting>
            </para>
            <para>You can use the <parameter>limit</parameter>
                parameter to specify the number of entries to return.
                By default the limit is set to 25. The minimum limit
                is one and the maximum is 1,000.</para>
            <para>The following example shows a marker specified and
                the limit set to 50, paging forward.</para>
            <programlisting> https://atom.myserver.com/feedname/events/?marker=urn:uuid:8439541b-b40e-4c23-b290-2820bd64257d&amp;direction=forward&amp;limit=50
</programlisting>
            <para>The following example shows a marker set and the
                limit set to 50, paging backward.</para>
            <programlisting>https://atom.myserver.com/feedname/events/?marker=urn:uuid:8439541b-b40e-4c23-b290-2820bd64257d&amp;direction=backward&amp;limit=50
</programlisting>
        </section>
        <section xml:id="Filter_Entries_by_Category_d1e1315">
            <title>Filtering entries by categories <?sbr?></title>
            <para>You can use a <command>GET</command> request to filter for certain types of events
                you would like to obtain from a feed by defining a specific <emphasis role="italic"
                    >search category</emphasis>. You specify the seach categories by adding
                    <parameter>search</parameter> as the URL parameter at the end of the feeds URL
                and then specifying the category or item you want to search for. The following
                example shows how to get all event types that fall under the
                    <emphasis>cloudsites.metered.site.usage</emphasis> category:</para>
            <para>
                <programlisting security="external">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://ord.feeds.api.rackspacecloud.com/sites/events/<replaceable>tenantID</replaceable>/?search=(cat=type:cloudsites.metered.site.usage)</programlisting>
                <programlisting security="internal">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://atom.staging.ord1.us.ci.rackspace.net/sites/events/?search=(cat=type:cloudsites.metered.site.usage)</programlisting>
            </para>
            <section xml:id="Filtering_using_AND_OR_NOT">
                <title>Advanced Filtering using AND, OR, and NOT</title>
                        <para>Cloud Feeds supports advanced filters using the AND, OR, and NOT
                            operators and their combinations. </para>
                        <para>The following example shows how to filter for multiple categories
                            using an AND statement:</para>
                        <para>
                            <example security="internal">
                                <title>Filtering for multiple categories using an AND
                                    statement</title>
                                <programlisting>http://atom.staging.ord1.us.ci.rackspace.net/namespace/feed/?search=(AND(cat=CAT1)(cat=CAT2))</programlisting>
                            </example>
                            <example security="external">
                                <title>Filtering for multiple categories using an AND
                                    statement</title>
                                <programlisting>http://ord.feeds.api.rackspacecloud.com/namespace/feed/?search=(AND(cat=CAT1)(cat=CAT2))</programlisting>
                            </example>
                        </para>
                        <para>The following example shows how to filter for multiple categories
                            using an OR statement:</para>
                        <para>
                            <example security="internal">
                                <title>Filtering for multiple categories using an OR
                                    statement</title>
                                <programlisting>http://atom.staging.ord1.us.ci.rackspace.net/namespace/feed/?search=(OR(cat=CAT1)(cat=CAT2))
</programlisting>
                            </example>
                            <example security="external">
                                <title>Filtering for multiple categories using an OR
                                    statement</title>
                                <programlisting>http://ord.feeds.api.rackspacecloud.com/namespace/feed/?search=(OR(cat=CAT1)(cat=CAT2))
</programlisting>
                            </example>
                        </para>
                        <para>The following example shows how to filter for a category that is
                            entered as not <emphasis role="bold">CAT1</emphasis> using a NOT
                            statement:</para>
                        <para>
                            <example security="internal">
                                <title>Filtering for a single category using a NOT statement</title>
                                <programlisting> http://atom.staging.ord1.us.ci.rackspace.net/namespace/feed/?search=(NOT(cat=CAT1)) </programlisting>
                            </example>
                            <example security="external">
                                <title>Filtering for a single category using a NOT statement</title>
                                <programlisting>http://ord.feeds.api.rackspacecloud.com/namespace/feed/?search=(NOT(cat=CAT1)) </programlisting>
                            </example>
                        </para>
                        <para>You can also use the AND, OR, and NOT operators to filter for multiple
                            categories combined.</para>
                        <para>The following example shows how to search for a category that is
                            entered as CAT1 and ( CAT2 or CAT3 ) but not CAT4:</para>
                        <para>
                            <example security="internal">
                                <title>Filtering for multiple categories using AND statement</title>
                                <programlisting>http://atom.staging.ord1.us.ci.rackspace.net/namespace/feed/?search=(AND(cat=CAT1)(OR(cat=CAT2)(cat=CAT3))(NOT(cat=CAT4))) </programlisting>
                            </example>
                            <example security="external">
                                <title>Filtering for multiple categories using AND statement</title>
                                <programlisting>http://ord.feeds.api.rackspacecloud.com/namespace/namespace/feed/?search=(AND(cat=CAT1)(OR(cat=CAT2)(cat=CAT3))(NOT(cat=CAT4))) </programlisting>
                            </example>
                        </para>
                    </section>
            </section>
        <section xml:id="Filtering_by_timestamp"><title>Filtering by timestamp</title>
            <para>You can use the <parameter>startingAt</parameter> query parameter to filter for
                feed entries starting at a certain timestamp. The parameter takes an ISO 8601 Date
                and Time format (see <link xlink:href="http://en.wikipedia.org/wiki/ISO_8601"
                    >http://en.wikipedia.org/wiki/ISO_8601</link>) and must contain a timezone, such
                as such as 2014-03-10T06:00:00.000Z.</para>
            <para>The following URL shows how to fetch entries with a timestamp that is newer than
                2014-03-10 00:00:00.000 UTC:</para>
            <programlisting security="internal">http://atom.staging.ord1.us.ci.rackspace.net/namespace/feed/?startingAt=2014-03-10T00:00:00.000Z</programlisting>
            <programlisting security="external">http://ord.feeds.api.rackspacecloud.com/namespace/feed/?startingAt=2014-03-10T00:00:00.000Z</programlisting>
            <para>The following URL shows how to fetch entries with a timestamp that older than
                2014-03-10 00:00:00.000 UTC by setting the <parameter>direction</parameter>
                parameter to <emphasis role="italic">backward</emphasis>:</para>
            <programlisting security="internal">http://atom.staging.ord1.us.ci.rackspace.net/namespace/feed/?startingAt=2014-03-10T00:00:00.000Z&amp;direction=backward</programlisting>
            <programlisting security="external">http://ord.feeds.api.rackspacecloud.com/namespace/feed/?startingAt=2014-03-10T00:00:00.000Z&amp;direction=backward</programlisting>
            <para>
                <note>
                    <para>The <emphasis role="bold">startingAt</emphasis> parameter can not be used
                        together with the <emphasis role="bold">marker</emphasis> parameter.</para>
                    <para>If the <emphasis role="bold">startingAt</emphasis> parameter is used
                        without a <emphasis role="bold">direction</emphasis> parameter, then
                        direction FORWARD is assumed. If you want to fetch feeds from a time period
                        before the time specified in the timestamp, you need to use the <emphasis
                            role="bold">direction</emphasis> parameter and then the <emphasis
                            role="bold">backward</emphasis> description, like the
                            following:<emphasis role="italic"> direction=backward.</emphasis></para>
                </note>
            </para></section>
        <section xml:id="Weak_ETag_Support_d1e1321">
            <title>Support for weak ETag </title>
            <para>Cloud Feeds supports weak entity tags (ETags). An
                ETag identifies a specific feed version. When the
                content of the feed changes, a different ETag is
                assigned. ETags provide an efficient way of checking
                whether a previously processed feed has changed. Weak
                ETags are sent back in the HTTP header with a name of
                ETag.</para>
            <para>Following is an example of weak ETag for a feed
                containing more than one Atom entry:</para>
            <programlisting>W/"4ec07c96e1399298d48db885c014703b"</programlisting>
            <para>ETags are not returned in the following situations:<orderedlist>
                    <listitem>
                        <para>The feed is empty</para>
                    </listitem>
                    <listitem>
                        <para>You use a marker, specify the direction
                            as forward, and no entries exist after
                            that marker.</para>
                    </listitem>
                </orderedlist></para>
        </section>
    </chapter>
    <chapter xml:id="General_API_Information-d1e633">
        <title>General API information</title>
        <para>The Cloud Feeds API is implemented using a RESTful web
            service interface. Like other products in the Rackspace
            Cloud suite, the Cloud Feeds service shares a common
            token-based authentication system that allows seamless
            access between products and services. </para>
        <note>
            <para> All requests to authenticate against and operate
                the service are performed by using SSL over HTTP
                (HTTPS) on TCP port 443. </para>
        </note>
        <section xml:id="Authentication-d1e647">
            <title>Authentication</title>
            <para>Every ReST request against the Cloud Feeds Service
                requires the inclusion of a specific authorization
                token, supplied by the <code>X-Auth-Token</code> HTTP
                header. Users obtain this token by first using the
                Rackspace Cloud Identity Service (for more information
                see, <link
                    xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/Overview-d1e65.html"
                    >Cloud Identity Service</link>) and supplying a
                valid username and API access key. </para>
            <section xml:id="AuthRoles-d1e699">
                <title>Authorization Roles Required for Cloud Feeds
                    Access</title>
                <para>
                    <table frame="all">
                        <title>Roles</title>
                        <tgroup cols="2">
                            <colspec colname="c1" colnum="1"
                                colwidth="1*"/>
                            <colspec colname="c2" colnum="2"
                                colwidth="2.57*"/>
                            <thead>
                                <row>
                                   <entry>Role Name</entry>
                                   <entry>Access</entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                   <entry>cloudfeeds:admin </entry>
                                   <entry>An administrative user,
                                   granted full access to the
                                   capabilities of the API for a
                                   single tenant (POST and
                                   GET).</entry>
                                </row>
                                <row>
                                   <entry>cloudfeeds:observer </entry>
                                   <entry>Able to observe Cloud Feeds
                                   data for a single tenant
                                   (GET).</entry>
                                </row>
                                <row>
                                   <entry>cloudfeeds:service-admin</entry>
                                   <entry>Able to observe Cloud Feeds
                                   data for all tenants (GET).</entry>
                                </row>
                                <row>
                                   <entry>identity:admin</entry>
                                   <entry>The same capabilities as
                                   cloudfeeds:service-admin. </entry>
                                </row>
                                <row>
                                   <entry>identity:user-admin </entry>
                                   <entry>The same capabilities as
                                   cloudfeeds:admin.</entry>
                                </row>
                                <row>
                                   <entry>admin</entry>
                                   <entry>The same capabilities as
                                   cloudfeeds:admin.</entry>
                                </row>
                                <row>
                                   <entry>observer</entry>
                                   <entry>The same capabilities as
                                   cloudfeeds:observer.</entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </table>
                </para>
            </section>
            <section xml:id="Geographic_Endpoints">
                <title>Geographic Endpoints</title>
                <para> Rackspace Cloud Identity Service serves as the
                    entry point to all Rackspace Cloud APIs and is
                    itself a ReSTful web service. </para>
                <para> You can use either of the following endpoints
                    to access the Identity Service, regardless of US
                    or UK identities: </para>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para><link xlink:href="&ENDPOINT-US-20;"
                                >&ENDPOINT-US-20;</link>
                        </para>
                    </listitem>
                    <listitem>
                        <para><link xlink:href="&ENDPOINT-UK-20;"
                                >&ENDPOINT-UK-20;</link></para>
                    </listitem>
                </itemizedlist>
                <para> Your account may be based in either the US or
                    the UK; this is not determined by your physical
                    location but by the location of the Rackspace
                    retail site which was used to create your account: </para>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para> If your account was created via <link
                                xlink:href="http://www.rackspacecloud.com"
                                >http://www.rackspacecloud.com</link>,
                            it is a US-based account. </para>
                    </listitem>
                    <listitem>
                        <para> If your account was created via <link
                                xlink:href="http://www.rackspace.co.uk"
                                >http://www.rackspace.co.uk</link>, it
                            is a UK-based account. </para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="Retrieving_Auth_Token"
                xmlns:svg="http://www.w3.org/2000/svg"
                xmlns:m="http://www.w3.org/1998/Math/MathML"
                xmlns:html="http://www.w3.org/1999/xhtml">
                <title>Retrieving the Authentication Token</title>
                <informaltable rules="all">
                    <tbody>
                        <tr>
                            <td colspan="1">&POST; </td>
                            <td colspan="1"> v2.0/tokens </td>
                            <td colspan="4"> Authenticate to receive a
                                token and a service catalog. </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s):
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): unauthorized
                        (<errorcode>401</errorcode>), userDisabled
                        (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), authFault
                        (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>) </simpara>
                <para> The authenticate operation provides clients
                    with an authentication token and a list of
                    regional cloud endpoints. The sample requests and
                    responses in this section illustrate a general
                    case. In your authentication request, use your own
                    credentials rather than the sample values shown
                    here for <code>username</code> and
                        <code>apiKey</code>. When you authenticate
                    successfully, the response to your authentication
                    request will include a catalog of the services to
                    which you have subscribed rather than the sample
                    values shown here.</para>
                <example>
                    <title>Auth Request: XML</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="credentials.xml.user"
                                units="linecolumn" coords="13 17"/>
                            <area xml:id="credentials.xml.key"
                                units="linecolumn" coords="14 15"/>
                        </areaspec>
                        <programlisting language="xml">
<xi:include href="samples/db-credentials-20.xml" parse="text"/>
                    </programlisting>
                    </programlistingco>
                </example>
                <example>
                    <title>Auth Request: JSON</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="credentials.json.user"
                                units="linecolumn" coords="14 22"/>
                            <area xml:id="credentials.json.key"
                                units="linecolumn" coords="15 20"/>
                        </areaspec>
                        <programlisting language="json">
<xi:include href="samples/db-credentials-20.json" parse="text"/>
                    </programlisting>
                    </programlistingco>
                </example>
                <calloutlist>
                    <callout arearefs="credentials.xml.user">
                        <para> The username supplied here is your
                            common Rackspace Cloud username. </para>
                    </callout>
                    <callout arearefs="credentials.xml.key">
                        <para> The key is your API access key. The key
                            can be obtained from the Rackspace Cloud
                            Control Panel in the <guimenu>&lt;Your
                                Account></guimenu>/<guimenuitem>API
                                Access</guimenuitem> section (login
                            here: <link
                                xlink:href="http://mycloud.rackspace.com/"
                                >Control Panel Login</link>). </para>
                    </callout>
                </calloutlist>
                <example>
                    <title>Auth Response: XML</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="response.xml.namespaces"
                                units="linecolumn" coords="7 9"/>
                            <area xml:id="response.xml.token"
                                units="linecolumn" coords="15 10"/>
                            <area xml:id="response.xml.dfltregion"
                                units="linecolumn" coords="16 67"/>
                            <area xml:id="response.xml.role"
                                units="linecolumn" coords="17 12"/>
                            <area xml:id="response.xml.catalog"
                                units="linecolumn" coords="22 21"/>
                            <area xml:id="response.xml.servicetype"
                                units="linecolumn" coords="51 34"/>
                            <area xml:id="response.xml.servicename"
                                units="linecolumn" coords="51 54"/>
                            <area xml:id="response.xml.region"
                                units="linecolumn" coords="52 30"/>
                            <area xml:id="response.xml.tenant"
                                units="linecolumn" coords="53 66"/>
                            <area xml:id="response.xml.url"
                                units="linecolumn" coords="54 9"/>
                        </areaspec>
                        <programlisting language="xml"><xi:include href="samples/db-auth-20.xml" parse="text"/></programlisting>
                    </programlistingco>
                </example>
                <example xml:id="auth-response-example-json">
                    <title>Auth Response: JSON</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="response.json.namespaces"
                                units="linecolumn" coords="200 1"/>
                            <area xml:id="response.json.token"
                                units="linecolumn" coords="9 8"/>
                            <area xml:id="response.json.dfltregion"
                                units="linecolumn" coords="16 45"/>
                            <area xml:id="response.json.role"
                                units="linecolumn" coords="17 12"/>
                            <area xml:id="response.json.catalog"
                                units="linecolumn" coords="30 8"/>
                            <area xml:id="response.json.servicetype"
                                units="linecolumn" coords="114 16"/>
                            <area xml:id="response.json.servicename"
                                units="linecolumn" coords="113 16"/>
                            <area xml:id="response.json.region"
                                units="linecolumn" coords="104 24"/>
                            <area xml:id="response.json.tenant"
                                units="linecolumn" coords="101 24"/>
                            <area xml:id="response.json.url"
                                units="linecolumn" coords="102 24"/>
                        </areaspec>
                        <programlisting language="json"><xi:include href="samples/db-auth-20.json" parse="text"/>
                    </programlisting>
                    </programlistingco>
                </example>
                <note>
                    <para>The information shown in the Auth Response
                        examples is for US-based accounts. If you
                        authenticate against the UK-endpoint for auth,
                        you will see the service catalog information
                        for UK-based accounts.</para>
                </note>
                <calloutlist>
                    <callout arearefs="response.xml.namespaces">
                        <para> In XML responses only, a list of
                            namespaces identifies API extensions that
                            add functionality to the core API. </para>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.xml.token">
                        <para> This token can be presented to a
                            service as evidence of authentication.
                            Tokens are valid for a finite duration; a
                            token's default lifespan is twenty-four
                            hours. </para>
                        <para> The token's <code>expires</code>
                            attribute denotes the time after which the
                            token will automatically become invalid. A
                            token may be manually revoked before the
                            time identified by the
                                <code>expires</code> attribute;
                                <code>expires</code> predicts a
                            token's maximum possible lifespan but does
                            not guarantee that it will reach that
                            lifespan. Clients are encouraged to cache
                            a token until it expires. </para>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.xml.dfltregion">
                        <para> Users can be assigned a default region
                            so that, when there is a choice between
                            multiple endpoints associated with a
                            service in the user's catalog, the
                            endpoint for the user's default region
                            will be selected if it is available. In
                            this example, the user's default region is
                            DFW and several of the services in the
                            user's catalog offer endpoints in that
                            region and the ORD region; this user's
                            work will be directed to the DFW region
                            whenever possible. </para>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.xml.role">
                        <para> Users can be assigned multiple roles,
                            with each role providing specific
                            privileges. In this example,
                                <code>jsmith</code> is the
                            administrative user for the account,
                            holding the fully-privileged
                                <code>identity:admin</code> role.
                            Other users might hold other roles with
                            different privileges. Roles need not be
                            associated with actual job functions such
                            as Administrator, Operator, Developer,
                            Tester, or Trainer. </para>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.xml.catalog">
                        <para> The service catalog lists the services
                            this user can access. In this example, the
                            user can access one database service, one
                            loadbalancing service, two compute
                            services (Cloud Servers OpenStack and
                            Cloud Servers), two object storage
                            services (Cloud Files Content Distribution
                            Network (CDN), and Cloud Files), and one
                            DNS service. The catalog listing for each
                            service provides at least one endpoint URL
                            for that service. Other information, such
                            as regions, versions, and tenants, is
                            provided if it's relevant to this user's
                            access to this service. </para>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.xml.servicetype">
                        <para> The service type attribute identifies
                            services that perform similar functions,
                            whatever those services might be named. In
                            this example, the services named
                            cloudServers and cloudServersOpenstack are
                            both identified as
                                <code>type="compute"</code>,
                            identifying them as compute services even
                            though the word "compute" does not appear
                            in their names. </para>
                        <important>
                            <para>Use service type as the primary
                                value for locating a service. If
                                multiple endpoints of the same service
                                type exist in the same region, use
                                service name as the tiebreaker.</para>
                        </important>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.xml.servicename">
                        <para> The service name attribute identifies
                            each unique service in the catalog. Once a
                            service is created, its name does not
                            change. However, new services of the same
                            service type may be added to the catalog
                            with new names. </para>
                        <important>
                            <para> If you are programmatically parsing
                                an authentication response, use
                                service type rather than service name
                                as the basis for determining whether a
                                user has access to a particular kind
                                of service. Service type is stable
                                across all releases; new service types
                                may be developed, but existing service
                                types are not renamed. In this
                                example, <code>type="compute"</code>
                                identifies all the available compute
                                services, one of which is named
                                cloudServers and one of which is named
                                cloudServersOpenStack. New compute
                                service names may be added in future
                                releases; whatever the compute
                                services are named, you can always
                                recognize them by parsing for
                                   <code>type="compute"</code> in the
                                authentication response's service
                                catalog. </para>
                        </important>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.xml.region">
                        <para> A service may expose endpoints in
                            different regions. Regional endpoints
                            allow clients to provision resources in a
                            manner that provides high availability. </para>
                        <para> Some services are not region-specific.
                            These services supply a single
                            non-regional endpoint and do not provide
                            access to internal URLs. </para>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.xml.tenant">
                        <para> Some services recognize specification
                            of a tenant. If a service does recognize
                            tenants, the format of the tenant
                            specification is defined only by the
                            service; for details about whether and how
                            to specify a tenant, check the
                            documentation for the service you are
                            using.</para>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.xml.url">
                        <para> An endpoint can be assigned public and
                            internal URLs. A public URL is accessible
                            from anywhere. Access to a public URL
                            usually incurs traffic charges. Internal
                            URLs are only accessible to services
                            within the same region. Access to an
                            internal URL is free of charge. </para>
                        <para> </para>
                    </callout>
                </calloutlist>
                <para>Authentication tokens are typically valid for 24
                    hours. Applications should be designed to
                    re-authenticate after receiving a 401
                    (Unauthorized) response from a service endpoint. </para>
                <important>
                    <para>If you are programmatically parsing an
                        authentication response, please be aware that
                        service names are stable for the life of the
                        particular service and can be used as keys.
                        You should also be aware that a user's service
                        catalog can include multiple uniquely-named
                        services which perform similar functions. For
                        example, cloudServersOpenStack is the
                        OpenStack version of compute whereas
                        cloudServers is the legacy version of compute;
                        the same user can have access to both
                        services. In Auth 2.0, the service type
                        attribute can be used as a key by which to
                        recognize similar services; see the tip
                        below.</para>
                </important>
                <tip>
                    <para>Beginning with Auth 2.0, the service catalog
                        includes a service type attribute to identify
                        services that perform similar functions but
                        have different names; for example,
                            <code>type="compute"</code> identifies
                        compute services such as cloudServers and
                        cloudServersOpenStack. Some developers have
                        found the service type attribute to be useful
                        in parsing the service catalog. For additional
                        information on Auth 2.0 (also known as the
                        Cloud Identity Service), refer to the
                            <citetitle>Cloud Identity Client Developer
                            Guide</citetitle> at <link
                            xlink:href="http://docs.rackspace.com"
                            >http://docs.rackspace.com/</link>.</para>
                </tip>
                <para>Databases service endpoints are published in the
                    service catalog in the Auth response with the
                    account number, which is a required element of the
                    service endpoints. The examples shown here are for
                    authentication for US customers. Customers with
                    UK-based accounts will see different values in the
                    service catalog. Refer to the next section for
                    more information about service endpoints. </para>
            </section>
        </section>
        <section xml:id="Service_Access_Endpoints-d1e753">
            <title>Service Access/Endpoints</title>
            <para>Cloud Feeds service is a regionalized service.
                Therefore, the user of the service is responsible for
                appropriate replication, caching, and overall
                maintenance of Cloud Feeds data across regional
                boundaries to other Cloud Feeds servers. </para>
            <table>
                <caption>Regionalized Service Endpoints</caption>
                <thead>
                    <tr align="center">
                        <td colspan="2">Region</td>
                        <td colspan="5">Endpoint</td>
                    </tr>
                </thead>
                <tbody>
                    <tr align="left">
                        <td colspan="2">Chicago (ORD)</td>
                        <td colspan="5"
                                ><code>https://ord.feeds.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                        </td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">Dallas/Ft. Worth (DFW)</td>
                        <td colspan="5"
                                ><code>https://dfw.feeds.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                        </td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">London (LON)</td>
                        <td colspan="5">
                            <code>https://lon.feeds.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                        </td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">Sydney (SYD)</td>
                        <td colspan="5">
                            <code>https://syd.feeds.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                        </td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">Hong Kong (HKG)</td>
                        <td colspan="5">
                            <code>https://hkg.feeds.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                        </td>
                    </tr>
                </tbody>
            </table>
        </section>
        <section xml:id="CloudFeedsEventsVersions-d1e757">
            <title>Cloud Feeds Events Versions</title>
            <para>Core Event and Product Event are the two types of
                event versions used by Cloud Feeds.</para>
            <section xml:id="Product_Event-d1e825">
                <title>Core Event</title>
                <para> The Core Event version is shown in the
                        <code>version</code> attribute of the
                        <code>&lt;event></code> element as follows:
                    <programlisting>&lt;event version="1" ...> &lt;/event><?sbr?> <?sbr?><?sbr?></programlisting>The
                    Core Event rarely has to be incremented.</para>
            </section>
            <section xml:id="CloudFeedsEventsVersions-d1e759">
                <title>Product Event</title>
                <para>The Product Event version is shown in the
                        <code>version</code> attribute of the
                        <code>&lt;product></code> as follows</para>
                <programlisting>&lt;cb-lic:product version="1" serviceCode="CloudBackup"
                    serverID="9445"
                    resourceType="AGENT"/></programlisting>
                <para>The Product Event version does evolve (e.g.,
                    from version one to version two), since products
                    might emit different types of events that make
                    increasing the version necessary. An example of a
                    Product Event version that evolves to version two
                    is the Cloud Backup License. Following are
                    examples of instances for Cloud Backup Product
                    Event versions one and two:</para>
                <example>
                    <title>Version 1 Cloud Backup Product Event </title>
                    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;?atom feed="backup/events"?> &lt;!-- ignore &lt;?atom..?>, used for testing -->
&lt;atom:entry xmlns="http://docs.rackspace.com/core/event"
    xmlns:cb-lic="http://docs.rackspace.com/usage/cloudbackup/license"
    xmlns:atom="http://www.w3.org/2005/Atom">
    &lt;atom:content type="application/xml">
        &lt;event endTime="2012-06-15T10:19:52Z" startTime="2012-06-14T10:19:52Z"
            region="DFW" dataCenter="DFW1" type="USAGE"
            id="8d89673c-c989-11e1-895a-0b3d632a8a89"
            resourceId="3863d42a-ec9a-11e1-8e12-df8baa3ca440"
            tenantId="1234" version="1">
            &lt;cb-lic:product version="1" serviceCode="CloudBackup"
                serverID="9445"
                resourceType="AGENT"/>
        &lt;/event>
    &lt;/atom:content>
&lt;/atom:entry></programlisting>
                </example>
                <example>
                    <title>Version 2 Cloud Backup Product Event
                        Example</title>
                    <programlisting>&lt;event xmlns="http://docs.rackspace.com/core/event"
       xmlns:cb-lic="http://docs.rackspace.com/usage/cloudbackup/license"
       endTime="2012-06-15T10:19:52Z" startTime="2012-06-14T10:19:52Z"
       region="DFW" dataCenter="DFW1" type="USAGE"
       id="8d89673c-c989-11e1-895a-0b3d632a8a89"
       resourceId="3863d42a-ec9a-11e1-8e12-df8baa3ca440"
       tenantId="1234" version="1">
    &lt;cb-lic:product version="2" serviceCode="CloudBackup"
                    serverID="9445"
                    serverName="SomeServerName"
                    external="false"
                    resourceType="AGENT"/>
&lt;/event></programlisting>
                </example>
                <para security="writeronly">Need to update this
                    example when URL for Cloud Feeds is available: <example>
                        <title>Sample Request URL for Contract Version
                            1.0</title>
                        <programlisting>https://ord.databases.api.rackspacecloud.com/<emphasis role="strong">v1.0</emphasis>/1234</programlisting>
                    </example>
                    <note>
                        <para>This document pertains to contract
                            version 1.0.</para>
                    </note>
                </para>
            </section>
        </section>
        <section xml:id="Limits-d1e1208">
            <title>Limits</title>
            <para>All accounts, by default, have a preconfigured set
                of thresholds (or limits) to manage capacity and
                prevent abuse of the system. The system recognizes the
                following kinds of limits: <firstterm>rate
                    limits</firstterm> and <firstterm>absolute
                    limits</firstterm>. Rate limits are thresholds
                that are reset after a certain amount of time passes.
                Absolute limits are fixed. </para>
            <para security="writeronly"> Writer: Add section titled
                Rate_Limits once there are rate limits for GET. </para>
            <section xml:id="Absolute_Limits-d1e1397">
                <title>Absolute Limit</title>
                <para>One thousand is the maximum number of Atom
                    entries that can be returned in a single
                    page.</para>
            </section>
            <section xml:id="retention_limit">
                <title>Retention Limit</title>
                <para>Elements are retained for a maximum of three
                    days. Anything that exceeds that time limit is
                    stored in archival links. </para>
            </section>
            <section xml:id="httpPRL">
                <title>HTTP POST Request Limit</title>
                <para>The maximum size limit in a
                        <methodname>POST</methodname> request is
                    200,000 bytes. </para>
            </section>
            <section xml:id="datetimeformat">
                <title>Date and Time Format</title>
                <para> For the display and consumption of date and
                    time values, the Cloud Feeds service uses a date
                    format that complies with ISO 8601. </para>
                <para>The following table lists the format of a Cloud
                    Feeds Date/Time and an example. An example of the
                    Date/Time follows: </para>
                <example>
                    <title>Cloud Feeds Date and Time Format Example </title>
                    <programlisting>The Date/Time Format yyyy-MM-dd'T'HH:mm:ss.SSSZ</programlisting>
                    <para>
                        <programlisting>&lt;feed xmlns="http://www.w3.org/2005/Atom">
    &lt;link href="https://atom.staging.ord1.us.ci.rackspace.net/glance/events/" rel="current" />
    &lt;link href="https://atom.staging.ord1.us.ci.rackspace.net/glance/events/" rel="self" />
    &lt;id>urn:uuid:28c08dce-f0d9-4710-9657-c5cd35b48018&lt;/id>
    &lt;title type="text">glance/events&lt;/title>
    &lt;link href="https://atom.staging.ord1.us.ci.rackspace.net/glance/events/?marker=tag:127.0.0.1:/image.send/fb5aa437-03fd-4a0a-80a5-668e34b8764d/&amp;limit=25&amp;search=&amp;direction=forward" rel="previous" />
    &lt;link href="https://atom.staging.ord1.us.ci.rackspace.net/glance/events/?marker=tag:127.0.0.1:/image.activate/33bdaeca-94f9-4c47-ad1f-6ecce25bb773/&amp;limit=25&amp;search=&amp;direction=backward" rel="next" />
    &lt;link href="https://atom.staging.ord1.us.ci.rackspace.net/glance/events/?marker=last&amp;limit=25&amp;search=&amp;direction=backward" rel="last" />
    &lt;updated><emphasis role="bold">2013-09-05T14:50:46.904Z</emphasis>&lt;/updated></programlisting>
                    </para>
                </example>
                <table rules="all">
                    <caption>Explanation of Date/Time Format
                        Codes</caption>
                    <thead>
                        <tr>
                            <td>Code</td>
                            <td>Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>yyyy</td>
                            <td>Four digit year</td>
                        </tr>
                        <tr>
                            <td>MM</td>
                            <td>Two digit month</td>
                        </tr>
                        <tr>
                            <td>dd</td>
                            <td>Two digit day of month</td>
                        </tr>
                        <tr>
                            <td>T</td>
                            <td>Separator for date/time</td>
                        </tr>
                        <tr>
                            <td>HH</td>
                            <td>Two digit hour of day (00-23)</td>
                        </tr>
                        <tr>
                            <td>mm</td>
                            <td>Two digit minutes of hour</td>
                        </tr>
                        <tr>
                            <td>ss</td>
                            <td>Two digit seconds of the minute</td>
                        </tr>
                        <tr>
                            <td>SSS</td>
                            <td>Three digit milliseconds of the
                                second</td>
                        </tr>
                        <tr>
                            <td>Z</td>
                            <td>RFC-822 timezone</td>
                        </tr>
                    </tbody>
                </table>
            </section>
            <section xml:id="pagination">
                <title>Pagination</title>
                <para>To reduce load on the service, list operations
                    return a maximum of 25 entries at a time. However,
                    you can use the limit parameter in the GET request
                    to allow up to 1,000 entries per page. Specifying
                    the number of entries to return is referred to as
                    pagination. If a request supplies no limit or one
                    that exceeds the configured default limit, the
                    default value is used instead.</para>
                <para>Pagination provides the ability to limit the
                    size of the returned data and retrieve a specified
                    subset of a large data set. Pagination has the
                    following key concepts: limit and marker.
                        <emphasis>Limit</emphasis> is the restriction
                    on the maximum number of items for that type that
                    can be returned. <emphasis>Marker</emphasis> is
                    the ID of the last item in the previous list
                    returned. For example, a query could request the
                    next 10 instances after the instance "1234" as
                    follows: <code>?limit=10&amp;marker=1234</code>.
                    Items are displayed sorted by ID. </para>
                <para>If the content returned by a request is
                    paginated, the response includes a structured link
                    that are similar to instance item's links, with
                    the basic structure <code>{"href": "&lt;url>",
                        "rel": "next"}</code>. Any response that is
                    truncated by pagination will have a
                        <emphasis>next</emphasis> link, which points
                    to the next item in the collection. If there are
                    no more items, no <emphasis>next</emphasis> link
                    is returned.</para>
            </section>
            <section xml:id="Rules_CF_PS">
                <title>Rules for Cloud Feeds Publishers and
                    Subscribers</title>
                <para><emphasis role="bold">Rules for
                        Subscribers</emphasis></para>
                <para>Subscribers may receive the following
                    responses:</para>
                <informaltable frame="void" width="769">
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <thead>
                        <tr>
                            <th>Code Category</th>
                            <th>Code</th>
                            <th>Code Description</th>
                            <th>Example Request</th>
                            <th>Example Response</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Successful</td>
                            <td>200</td>
                            <td>OK</td>
                            <td>Get to Collection URI.</td>
                            <td>200 + Atom Feed Document</td>
                            <td>None</td>
                        </tr>
                        <tr>
                            <td>Successful</td>
                            <td>200</td>
                            <td>OK</td>
                            <td>Get to Member URI.</td>
                            <td>200 +Member Representation</td>
                            <td>None</td>
                        </tr>
                        <tr>
                            <td>Client Error</td>
                            <td>401</td>
                            <td>None</td>
                            <td>Get with a missing, expired, or
                                invalid token.</td>
                            <td>None</td>
                            <td>Retry with a valid token.</td>
                        </tr>
                        <tr>
                            <td>Server Error</td>
                            <td>500</td>
                            <td>Internal Server Error</td>
                            <td>Get while database is offline, or
                                other network failure.</td>
                            <td>None</td>
                            <td>Retry until network failure is
                                resolved.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <para><emphasis role="bold">Rules for
                        Publishers</emphasis></para>
                <para>Response Codes:</para>
                <itemizedlist>
                    <listitem>
                        <para>For every event posted to Cloud Feeds,
                            ensure that the response is a HTTP 201
                            (Created) and the Atom XML posted is in
                            the response body. If any response other
                            than a 201 is received, there is either a
                            problem with the event or a problem with
                            Cloud Feeds</para>
                    </listitem>
                    <listitem>
                        <para>If a 5xx response is received, the
                            problem is with Cloud Feeds (e.g. Cloud
                            Feeds is down). As a result, the publisher
                            must queue their events and re-post.
                            Publishers should queue events until the
                            issue is resolved</para>
                    </listitem>
                    <listitem>
                        <para>If a 4xx response is received, the
                            problem is with the event. This could be
                            an improperly formatted event or an event
                            that does not adhere to the business rules
                            included in the validation schema. The
                            problem should be logged and the product
                            ops and NebOps teams should be notified of
                            the problem</para>
                    </listitem>
                </itemizedlist>
                <informaltable frame="void">
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <thead>
                        <tr>
                            <th>Code Category</th>
                            <th>Code</th>
                            <th>Code Description</th>
                            <th>Example Request</th>
                            <th>Example Response</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Successful</td>
                            <td>201</td>
                            <td>Created</td>
                            <td>POST to Collection URI with Member
                                Representation. </td>
                            <td>Location: Member Entry URI</td>
                            <td/>
                        </tr>
                        <tr>
                            <td>Client Error</td>
                            <td>400</td>
                            <td>None</td>
                            <td>POST with schema validation error
                                .</td>
                            <td>Schema validation errors have content
                                in the message body.</td>
                            <td>Fix entry and re-post.</td>
                        </tr>
                        <tr>
                            <td>Client Error</td>
                            <td>401</td>
                            <td>None</td>
                            <td>POST with a missing, expired, or
                                invalid token. Re-post the message
                                with a valid token. </td>
                            <td/>
                            <td>Retry with a valid token.</td>
                        </tr>
                        <tr>
                            <td>Client Error</td>
                            <td>403</td>
                            <td>None</td>
                            <td>POST forbidden (i.e.: tenant trying to
                                access wrong protocol) </td>
                            <td/>
                            <td>Fix entry and re-post.</td>
                        </tr>
                        <tr>
                            <td>Client Error</td>
                            <td>404</td>
                            <td>None</td>
                            <td>Not found </td>
                            <td/>
                            <td>Fix entry and re-post.</td>
                        </tr>
                        <tr>
                            <td>Client Error</td>
                            <td>405</td>
                            <td>None</td>
                            <td> Used a PUT instead of a POST.</td>
                            <td/>
                            <td>Fix entry and re-post.</td>
                        </tr>
                        <tr>
                            <td>Client Error</td>
                            <td>409</td>
                            <td>None</td>
                            <td>POST that is a duplicate (conflict).
                                All feeds will return 409 if duplicate
                                entryId is sent in the request except
                                for Nova and Glance because Cloud
                                Feeds generates unique entryIds for
                                these feeds. Note that for Common
                                Usage Framework standard entries, the
                                event ID will be used as the Atom
                                entry ID. (If it is posted without an
                                Atom entry ID, the event ID will be
                                used as the Atom entry ID. If it is
                                posted with an Atom entry ID, the Atom
                                entry ID will be overwritten by the
                                event ID.)</td>
                            <td>Duplicates have no content in the
                                message body.</td>
                            <td>Fix entry and re-post.</td>
                        </tr>
                        <tr>
                            <td>Client Error</td>
                            <td>415</td>
                            <td>None</td>
                            <td>POST that is in an unsupported format
                                (i.e., sending json when XML is
                                expected). </td>
                            <td/>
                            <td>Fix entry and re-post.</td>
                        </tr>
                        <tr>
                            <td>Client Error</td>
                            <td>422</td>
                            <td>None</td>
                            <td>Typically this error occurs when
                                malformed Atom XML is passed to Cloud
                                Feeds. It can also occur when no Atom
                                XML was passed in.</td>
                            <td/>
                            <td>Fix entry and re-post.</td>
                        </tr>
                        <tr>
                            <td>Client Error</td>
                            <td>429</td>
                            <td>Rate Limited</td>
                            <td>Cloud Feeds will be set to 500 POSTs
                                per second per user. </td>
                            <td/>
                            <td>Retry until the entry is posted.</td>
                        </tr>
                        <tr>
                            <td>Server Error</td>
                            <td>500</td>
                            <td>Internal Server Error</td>
                            <td>POST while database is offline, or
                                other network failure.</td>
                            <td/>
                            <td>Retry until network failure is
                                resolved.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>If the content returned by a request is
                    paginated, the response includes a structured link
                    that are similar to instance item's links, with
                    the basic structure <code>{"href": "&lt;url>",
                        "rel": "next"}</code>. Any response that is
                    truncated by pagination will have a
                        <emphasis>next</emphasis> link, which points
                    to the next item in the collection. If there are
                    no more items, no <emphasis>next</emphasis> link
                    is returned.</para>
            </section>
        </section>
        <section xml:id="RBAC"
            xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <title>Role Based Access Control</title>
            <para>Role Based Access Control (RBAC) restricts access to
                the capabilities of Rackspace Cloud services,
                including the Cloud Feeds API, to authorized users
                only. RBAC enables Rackspace Cloud customers to
                specify which account users of their Cloud account
                have access to which Cloud Feeds API service
                capabilities, based on roles defined by Rackspace (see
                    <xref linkend="RBAC_product_roles_table"/>). The
                permissions to perform certain operations in Cloud
                Feeds API – create, read, update, delete – are
                assigned to specific roles, and these roles can be
                assigned by the Cloud account admin user to account
                users of the account. </para>
            <section xml:id="Assigning-Roles-d1e001">
                <title>Assigning Roles to Account Users</title>
                <para>The account owner (identity:user-admin) can
                    create account users on the account and then
                    assign roles to those users. The roles grant the
                    account users specific permissions for accessing
                    the capabilities of the Cloud Feeds service. Each
                    account has only one account owner, and that role
                    is assigned by default to any Rackspace Cloud
                    account when the account is created.</para>
                <para>See the <citetitle>Cloud Identity Client
                        Developer Guide</citetitle> for information
                    about how to perform the following tasks:</para>
                <itemizedlist>
                    <listitem>
                        <para><link
                                xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/POST_addUser_v2.0_users_.html"
                                > Create account users</link></para>
                    </listitem>
                    <listitem>
                        <para><link
                                xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/PUT_addUserRole_v2.0_users__userId__roles_OS-KSADM__roleId__.html"
                                > Assign roles to account
                            users</link></para>
                    </listitem>
                    <listitem>
                        <para><link
                                xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/DELETE_deleteUserRole_v2.0_users__userId__roles_OS-KSADM__roleId__.html"
                                > Delete roles from account
                                users</link></para>
                    </listitem>
                </itemizedlist>
                <note>
                    <para>The account admin user (identity:user-admin)
                        role cannot hold any additional roles because
                        it already has full access to all capabilities
                        by default.</para>
                </note>
            </section>
            <section xml:id="RBAC_product_roles">
                <title>Roles Available for Cloud Feeds </title>
                <para>Three roles (admin, observer, and service-admin)
                    can be used to access the Cloud Feeds API
                    specifically. The following table describes these
                    roles and their permissions.</para>
                <table xml:id="RBAC_product_roles_table" rules="all">
                    <caption>Cloud Feeds Product Roles and
                        Capabilities</caption>
                    <col width="50%"/>
                    <col width="50%"/>
                    <thead>
                        <tr>
                            <th>Role Name</th>
                            <th>Role Permissions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>feeds:admin</td>
                            <td>This role grants full access to the
                                capabilities of the API for a single
                                tenant (POST and GET).</td>
                        </tr>
                        <tr>
                            <td>feeds:observer</td>
                            <td>This role provides the ability to
                                observe Cloud Feeds data for a single
                                tenant (GET).</td>
                        </tr>
                        <tr>
                            <td>feeds:service-admin</td>
                            <td>This role provides the ability to
                                observe Cloud Feeds data for all
                                tenants (GET).</td>
                        </tr>
                    </tbody>
                </table>
                <para>Additionally, two multiproduct roles apply to
                    all products. Users with multiproduct roles
                    inherit access to future products when those
                    products become RBAC-enabled. The following table
                    describes these roles and their
                    permissions.</para>
                <table rules="all">
                    <caption> Multiproduct (Global) Roles and
                        Permissions</caption>
                    <col width="50%"/>
                    <col width="50%"/>
                    <thead>
                        <tr>
                            <th>Role Name</th>
                            <th>Role Permissions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>admin</td>
                            <td>This role provides Create, Read,
                                Update, and Delete permissions in all
                                products, where access is
                                granted.</td>
                        </tr>
                        <tr>
                            <td>observer</td>
                            <td>This role provides Read permission in
                                all products, where access is
                                granted.</td>
                        </tr>
                    </tbody>
                </table>
            </section>
            <section xml:id="RBAC-Resolving-Conflicts-d1e001"
                version="5.0">
                <title>Resolving Conflicts Between RBAC Multiproduct
                    vs. Custom (Product-specific) Roles</title>
                <para>The account owner can set roles for both
                    multiproduct and Cloud Feeds scope, and it is
                    important to understand how any potential
                    conflicts among these roles are resolved. When two
                    roles appear to conflict, the role that provides
                    the more extensive permissions takes precedence.
                    Therefore, admin roles take precedence over
                    observer and creator roles, because admin roles
                    provide more permissions. </para>
                <para>The following table shows two examples of how
                    potential conflicts between user roles in the
                    Control Panel are resolved: </para>
                <para>
                    <informaltable rules="all">
                        <thead>
                            <tr align="center">
                                <td>Permission Configuration</td>
                                <td>View of Permission in the Control
                                   Panel </td>
                                <td>Can the User Perform Product Admin
                                   Functions in the Control
                                   Panel?</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>User is assigned the following
                                   roles: multiproduct <emphasis
                                   role="bold">observer</emphasis> and
                                   Cloud Feeds <emphasis role="bold"
                                   >admin</emphasis></td>
                                <td>Appears that the user has only the
                                   multiproduct <emphasis role="bold"
                                   >observer</emphasis> role</td>
                                <td>Yes, for Cloud Feeds only. The
                                   user has the <emphasis role="bold"
                                   >observer</emphasis> role for the
                                   rest of the products.</td>
                            </tr>
                            <tr>
                                <td>User is assigned the following
                                   roles: multiproduct <emphasis
                                   role="bold">admin</emphasis> and
                                   Cloud Feeds <emphasis role="bold"
                                   >observer</emphasis></td>
                                <td>Appears that the user has only the
                                   multiproduct <emphasis role="bold"
                                   >admin</emphasis> role</td>
                                <td>Yes, for all of the products. The
                                   Cloud Feeds <emphasis role="bold"
                                   >observer</emphasis> role is
                                   ignored.</td>
                            </tr>
                        </tbody>
                    </informaltable>
                </para>
            </section>
            <section xml:id="RBAC-Permissions-Cross-Ref-d1e001"
                version="5.0">
                <title>RBAC Permissions Cross-reference to Cloud Feeds
                    API Operations</title>
                <para>API operations for Cloud Feeds may or may not be
                    available to all roles. To see which operations
                    are permitted to invoke which calls, please review
                        <link
                        xlink:href="http://www.rackspace.com/knowledge_center/article/permissions-matrix-for-role-based-access-control-rbac"
                        > the Knowledge Center article</link>.</para>
            </section>
        </section>
    </chapter>
    <xi:include href="api-operations.xml"/>
</book>
