<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [        
 <!ENTITY ndash  "&#x2013;">
 <!ENTITY mdash  "&#x2014;">
 <!ENTITY hellip "&#x2026;">      

        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

        <!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
        <!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">
        <!ENTITY ENDPOINT-UK-20 "https://lon.identity.api.rackspacecloud.com/v2.0/">

]>
<book xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xml:id="feeds-getting-started" version="5.0-extension RaxBook-2.0">
    <title>Rackspace Cloud Feeds Getting Started Guide</title>
    <info>
        <copyright>
            <year>2013</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v1.0</releaseinfo>
        <productname>Rackspace Cloud Databases</productname>
        <pubdate>2013-06-17</pubdate>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the
                    template.</remark>
            </annotation>
        </legalnotice>
        <revhistory>
            <revision>
                <date>2013-07-01</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Ipsum lorem.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
        </revhistory>
        <raxm:metadata
            xmlns:raxm="http://docs.rackspace.com/api/metadata">
            <raxm:displayname>Getting Started Guide</raxm:displayname>
            <raxm:product version="v1.0">feeds</raxm:product>
            <raxm:priority>10</raxm:priority>
        </raxm:metadata>
    </info>
    <chapter xml:id="Feeds_Doc_Change_History">
        <title>Document Change History</title>
        <para>This version of the Getting Started replaces and
            obsoletes all previoåΩœqaazaqz1azqus versions. The most
            recent changes are described in the table below:</para>
        <?rax revhistory?>
    </chapter>
    <chapter xml:id="Feeds_Overview">
        <title>Overview</title>
        <para>Follow the steps described in this guide to use the
            Rackspace Cloud Databases API and the Cloud
            Servers<trademark/> section of the Rackspace Cloud Control
            Panel to create and access your database instances via
            Rackspace Cloud Servers.</para>
        <para>For details about using the Cloud Databases API, refer
            to the <citetitle>Cloud Databases Developer
                Guide</citetitle> at <link
                xlink:href="http://docs.rackspace.com/"
                >http://docs.rackspace.com/</link>.</para>
        <para>For more details about Rackspace Cloud Databases, refer
            to <link
                xlink:href="http://www.rackspace.com/cloud/cloud_hosting_products/databases/"
                >http://www.rackspace.com/cloud/cloud_hosting_products/databases/</link>.
            This site also offers links to Rackspace's official
            support channels, including knowledge center articles,
            forums, phone, chat, and email. </para>
        <para>Please visit our <link
                xlink:href="http://feedback.rackspacecloud.com/forums/71021-product-feedback/category/42449-cloud-databases"
                >Product Feedback Forum</link> and let us know what
            you think about Cloud Databases!</para>
        <section xml:id="Prerequisites_Examples">
            <title>Prerequisites for Running Examples</title>
            <para>In order to run the examples in this guide, you must
                have the following prerequisites: <itemizedlist
                    spacing="compact">
                    <listitem>
                        <para>Rackspace Cloud account</para>
                    </listitem>
                    <listitem>
                        <para>Rackspace Cloud username and password,
                            as specified during registration</para>
                    </listitem>
                </itemizedlist></para>
        </section>
        <section xml:id="Pricing_SLA-d1e1362">
            <title>Pricing and Service Level</title>
            <para>Cloud Databases is part of the Rackspace Cloud and
                your use through the API will be billed as per the
                pricing schedule at <link
                    xlink:href="http://www.rackspace.com/cloud/public/databases/pricing"
                    >http://www.rackspace.com/cloud/public/databases/pricing</link>.
                Cloud Servers is also part of the Rackspace Cloud and
                your use through the Cloud Control Panel will be
                billed as per the pricing schedule at <link
                    xlink:href="http://www.rackspace.com/cloud/public/servers/pricing"
                    >http://www.rackspace.com/cloud/public/servers/pricing</link>.</para>
            <para>The Service Level Agreements (SLAs) for Cloud
                Databases and Cloud Servers are available at <link
                    xlink:href="http://www.rackspace.com/cloud/legal/sla/#cloud_databases"
                    >http://www.rackspace.com/cloud/legal/sla/#cloud_databases</link>
                and <link
                    xlink:href="http://www.rackspace.com/cloud/legal/sla"
                    >http://www.rackspace.com/cloud/legal/sla</link>
                respectively.</para>
        </section>
    </chapter>
    <chapter xml:id="Feeds_Sending_API_Requests">
        <title>Send Requests to the API</title>
        <para>You have several options for sending requests through an
            API: </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para>Developers and testers may prefer to use cURL,
                    the command-line tool from <link
                        xlink:href="http://curl.haxx.se/"
                        >http://curl.haxx.se/</link>. </para>
                <para>With cURL you can send HTTP requests and receive
                    responses back from the command line. </para>
            </listitem>
            <listitem>
                <para>If you like to use a more graphical interface,
                    the ReST client for Firefox also works well for
                    testing and trying out commands, see <link
                        xlink:href="https://addons.mozilla.org/en-US/firefox/addon/restclient/"
                        >https://addons.mozilla.org/en-US/firefox/addon/restclient/</link>.
                </para>
            </listitem>
            <listitem>
                <para>You can also download and install rest-client, a
                    Java application to test ReSTful web services,
                    from <link
                        xlink:href="http://code.google.com/p/rest-client/"
                        >http://code.google.com/p/rest-client/</link>.
                </para>
            </listitem>
        </itemizedlist>
        <section xml:id="Feeds_using-curl-cli">
            <title>Send API Requests Using cURL</title>
            <para>cURL is a command-line tool that is available on
                most UNIX®-like environments and Mac OS X® and can be
                downloaded for Windows® in order to interact with the
                ReST interfaces. For more information on cURL, visit
                    <link xlink:href="http://curl.haxx.se/"
                    >http://curl.haxx.se/</link>. </para>
            <para>cURL allows you to transmit and receive HTTP
                requests and responses from the command-line or from
                within a shell script. This makes it possible to work
                with the ReST API directly without using one of the
                client APIs. </para>
            <para>The following cURL command-line options will be used
                in this guide to run the examples:</para>
            <variablelist>
                <title>cURL Command-Line Options</title>
                <varlistentry>
                    <term><option>-d</option></term>
                    <listitem>
                        <para>Sends the specified data in a post
                            request to the HTTP server.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-i</option></term>
                    <listitem>
                        <para>Includes the HTTP header in the
                            output.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-H HEADER</option></term>
                    <listitem>
                        <para>Specify an HTTP header in the
                            request.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-X</option></term>
                    <listitem>
                        <para>Specifies the request method to use when
                            communicating with the HTTP server. The
                            specified request is used instead of the
                            default method, which is GET. For example,
                                <option>-X PUT</option> specifies to
                            use the PUT request method.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <note>
                <para>If you have the tools, you can run the cURL JSON
                    request examples with the following options to
                    format the output from cURL: <command>&lt;curl
                        JSON request example> | python
                        -mjson.tool</command>.</para>
            </note>
        </section>
        <section xml:id="Feeds_copy_paste_examples">
            <title>Copying and Pasting cURL Request Examples into a
                Terminal Window</title>
            <para>To run the cURL request examples shown in this guide
                on Linux or Mac systems, copy and paste each example
                from the HTML version of this guide into an ASCII
                editor (for example <emphasis role="bold"
                    >vi</emphasis> or <emphasis role="bold"
                    >TextEdit</emphasis>). Then modify each example
                with your required account information and so forth,
                as detailed in this guide.</para>
            <note>
                <para>The carriage returns in the cURL request
                    examples that are part of the cURL syntax are
                    escaped with a backslash ('\') in order to avoid
                    prematurely terminating the command. However you
                    should not escape carriage returns inside the xml
                    or json message within the command.</para>
            </note>
            <para>Consider the following cURL Authenticate Request:
                XML example that is described in detail in <xref
                    linkend="Generating_Auth_Token"/>:</para>
            <example>
                <title>cURL Authenticate Request: XML</title>
                <?dbfo keep-together="always"?>
                <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'&lt;?xml version="1.0" encoding="UTF-8"?>  
 &lt;auth&gt;   
    &lt;apiKeyCredentials     
        xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"     
        username="<emphasis role="bold">your_username</emphasis>"     
        apiKey="<emphasis role="bold">your_api_key</emphasis>"/&gt;   
 &lt;/auth&gt;<option>'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
            </example>
            <para>You can see that the lines that are part of the cURL
                command syntax have all been escaped with a backslash
                ('\') to indicate that the command continues on the
                next line:</para>
            <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
  
   
(... lines within the xml portion of the message are not shown in this example)
(... the example only shows lines that are part of cURL syntax)     
     
    
   
 &lt;/auth&gt;<option>'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
            <para>However the lines <emphasis>within</emphasis> the
                xml portion of the message are
                    <emphasis>not</emphasis> escaped with a backslash
                ('\') in order to avoid issues with the xml
                processing:</para>
            <screen language="bash">'&lt;?xml version="1.0" encoding="UTF-8"?>  
 &lt;auth&gt;   
    &lt;apiKeyCredentials     
        xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"     
        username="<emphasis role="bold">your_username</emphasis>"     
        apiKey="<emphasis role="bold">your_api_key</emphasis>"/&gt;   
 &lt;/auth&gt;<option>'</option> \
</screen>
            <note>
                <para>The final line of the xml message is escaped
                    since the backslash lies
                        <emphasis>outside</emphasis> the xml message
                    and continues the cURL command to the next
                    line.</para>
            </note>
            <para>After you are finished modifying the text for the
                cURL request example with your information (for
                example <emphasis role="bold"
                        ><code>your_username</code></emphasis> and
                    <emphasis role="bold"
                    ><code>your_api_key</code></emphasis>), paste it
                into your terminal window. Then execute the cURL
                command by pressing <guilabel>Enter</guilabel>.</para>
            <para>If you have trouble copying and pasting the examples
                as described, try typing the entire example on one
                long line, removing all the backslash line
                continuation characters.</para>
        </section>
    </chapter>
    <chapter xml:id="Generating_Auth_Token">
        <title>Generate an Authentication Token</title>
        <para>You need to generate a token whether you use cURL or a
            ReST client.</para>
        <para>In order to use the ReST API, you will first need to
            obtain an authentication token, which will need to be
            passed in for each request using the
                <code>X-Auth-Token</code> header. </para>
        <para>The following example demonstrates how to use cURL to
            obtain the authentication token and the account number.
            You will need to supply the authentication token and
            account number when making subsequent Cloud Databases API
            calls.</para>
        <para>Remember to replace the names in the Authenticate
            Request examples below with their respective
                values:<itemizedlist spacing="compact">
                <listitem>
                    <para><emphasis role="bold"
                            >your_username</emphasis> &mdash; The
                        username is your common Rackspace Cloud
                        username, as supplied during
                        registration.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold"
                            >your_api_key</emphasis> &mdash; The key
                        is your API access key. The key can be
                        obtained from the Rackspace Cloud Control
                        Panel in the <guimenu>&lt;Your
                            Account></guimenu> / <guimenuitem>API
                            Keys</guimenuitem> section (login here:
                            <link
                            xlink:href="http://mycloud.rackspace.com/"
                            >Cloud Control Panel</link>).</para>
                </listitem>
            </itemizedlist></para>
        <para> You can use either of the following endpoints to access
            the Authentication Service, regardless of US or UK
            identities: </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para><link xlink:href="&ENDPOINT-US-20;"
                        >&ENDPOINT-US-20;</link>
                </para>
            </listitem>
            <listitem>
                <para><link xlink:href="&ENDPOINT-UK-20;"
                        >&ENDPOINT-UK-20;</link></para>
            </listitem>
        </itemizedlist>
        <para> Your account may be based in either the US or the UK;
            this is not determined by your physical location but by
            the location of the Rackspace retail site which was used
            to create your account: </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para> If your account was created via <link
                        xlink:href="http://www.rackspacecloud.com"
                        >http://www.rackspacecloud.com</link>, it is a
                    US-based account. </para>
            </listitem>
            <listitem>
                <para> If your account was created via <link
                        xlink:href="http://www.rackspace.co.uk"
                        >http://www.rackspace.co.uk</link>, it is a
                    UK-based account. </para>
            </listitem>
        </itemizedlist>
        <para>Notice that you authenticate using a special URL for
            Cloud authentication services. For example, you may use
                <code>https://identity.api.rackspacecloud.com/v2.0/tokens</code>,
            as shown in the following Authenticate Request examples.
            Note that the <code>v2.0</code> component in the URL
            indicates that you are using version 2.0 of the Cloud Auth
            API.</para>
        <example>
            <title>cURL Authenticate Request: XML</title>
            <?dbfo keep-together="always"?>
            <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'&lt;?xml version="1.0" encoding="UTF-8"?>  
&lt;auth>
   &lt;apiKeyCredentials
      xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"
         username="<emphasis role="bold">your_username</emphasis>" 
         apiKey="<emphasis role="bold">your_api_key</emphasis>"/>
&lt;/auth>' \
<option>-H 'Content-Type: application/xml'</option> \
<option>-H 'Accept: application/xml'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
        </example>
        <example>
            <title>cURL Authenticate Request: JSON</title>
            <?dbfo keep-together="always"?>
            <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'{
    "auth":
    {
       "RAX-KSKEY:apiKeyCredentials":
       {  
          "username": "<emphasis role="bold">your_username</emphasis>",  
          "apiKey": "<emphasis role="bold">your_api_key</emphasis>"}
    }  
}' \
<option>-H 'Content-Type: application/json'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
        </example>
        <note>
            <para>For UK-based accounts, you may decide to use
                    <code>'https://lon.identity.api.rackspacecloud.com/v2.0/tokens'</code>
                instead.</para>
        </note>
        <para>The authentication token <code>id</code> is returned
            along with an <code>expires</code> attribute that
            specifies when the token expires. </para>
        <note>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>For all response examples in this guide, the
                        field values you receive in your responses
                        will vary from those shown here since they
                        will be specific to your account.</para>
                </listitem>
                <listitem>
                    <para>The information shown in the Authenticate
                        Response examples above is for US-based
                        accounts. If you authenticate against the
                        UK-endpoint for auth, you will see the service
                        catalog information for UK-based
                        accounts.</para>
                </listitem>
                <listitem>
                    <para>The <code>id</code> attribute in the
                        Authenticate Response specifies the
                        authentication token. Tokens are valid for a
                        finite duration.</para>
                    <para>Remember to supply your authentication token
                        wherever you see the field <emphasis
                            role="bold">your_auth_token</emphasis> in
                        the examples in this guide.</para>
                </listitem>
                <listitem>
                    <para> The <code>expires</code> attribute denotes
                        the time after which the token will
                        automatically become invalid. A token may be
                        manually revoked before the time identified by
                        the expires attribute; <code>expires</code>
                        predicts a token's maximum possible lifespan
                        but does not guarantee that it will reach that
                        lifespan. Clients are encouraged to cache a
                        token until it expires.</para>
                </listitem>
                <listitem>
                    <para>Applications should be designed to
                        re-authenticate after receiving a 401
                        (Unauthorized) response from a service
                        endpoint.</para>
                </listitem>
            </itemizedlist>
        </note>
        <para>You will find the actual account number after the final
            '/' in the <code>publicURL</code> field. In this example,
            you can see that the account number is 1100111. You need
            to specify your account number on most of the Cloud Feeds
            API calls, wherever you see the field <emphasis
                role="bold">your_acct_id</emphasis> specified in the
            examples in this guide.</para>
        <para>After authentication, you can use cURL to perform &GET;,
            &DELETE;, and &POST; requests for the Cloud Feeds
            API.</para>
    </chapter>
    <chapter xml:id="Service_Access_Endpoints-d1e753">
        <title>Service Access/Endpoints</title>
        <para>The endpoints to use for your Cloud Feeds API calls are
            summarized in the table below.</para>
        <para>
            <table rules="all">
                <caption>Regionalized Service Endpoints</caption>
                <thead>
                    <tr align="center">
                        <td colspan="2">Region</td>
                        <td colspan="5">Endpoint</td>
                    </tr>
                </thead>
                <tbody>
                    <tr align="left">
                        <td colspan="2">Chicago (ORD)</td>
                        <td colspan="5"
                                ><code>https://ord.feeds.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                        </td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">Dallas/Ft. Worth (DFW)</td>
                        <td colspan="5"
                                ><code>https://dfw.feeds.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                        </td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">London (LON)</td>
                        <td colspan="5">
                            <code>https://lon.feeds.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                        </td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">Sydney (SYD)</td>
                        <td colspan="5">
                            <code>https://syd.feeds.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                        </td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">Hong Kong (HKG)</td>
                        <td colspan="5">
                            <code>https://hkg.feeds.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                        </td>
                    </tr>
                </tbody>
            </table>
        </para>
        <note>
            <itemizedlist>
                <listitem>
                    <para>Choose the endpoint from the table for the
                        datacenter where your Cloud resources are
                        located.</para>
                </listitem>
                <listitem>
                    <para>The Cloud Server that you use must be
                        located in the same datacenter where your
                        database resides.</para>
                </listitem>
                <listitem>
                    <para>All examples in this guide assume that you
                        are operating against the ORD datacenter,
                        however if you are using a different
                        datacenter, be sure to use the associated
                        endpoint from the table above instead.</para>
                </listitem>
            </itemizedlist>
        </note>
        <para>Replace the sample account ID number,
                <parameter>1234</parameter>, with your actual account
            number returned as part of the authentication response.
            Use your actual account number wherever you see the field
                <emphasis role="bold">your_acct_id</emphasis>
            specified in this guide. Refer to <xref
                linkend="Generating_Auth_Token"/>.</para>
    </chapter>
    <chapter xml:id="Concepts">
        <title>Cloud Feeds Concepts</title>
        <para>Cloud Feeds uses the Atom Publishing Protocol (APP) for
            publishing different typea of feeds. Atom is an XML-based
            document format that describes lists of related
            information known as "feeds". Feeds are composed of a
            number of items, known as "entries." Each entry has an
            extensible set of attached metadata. </para>
        <para>The Atom Publishing Protocol together with the Atom
            Syndication Format (ASF) provides interaction with
            content, especially at blogs and RSS. TAPP is based on
            HTTP transfer of Atom-formatted representations. The Atom
            format is documented in the Atom Syndication
            Format.</para>
        <para>Atom Hopper is an open source ATOMPub server for
            accessing, processing and aggregating Atom entries. Atom
            Hopper was designed to make it easy to build both
            generalized and specialized persistence mechanisms for
            Atom XML data, based on the Atom Syndication Format and
            the Atom Publishing Protocol.</para>
        <para>To read the official documentation for the Atom
            Syndication Format, go to <link
                xlink:href="http://tools.ietf.org/search/rfc4287#section-4.1"
                >RFC 4287</link>. For more information about APP,
            visit <link xlink:href="http://atompub.org/"
                >http://atompub.org/</link>.</para>
        <section xml:id="Container_Elements">
            <title>Container Elements</title>
            <para>An Atom feed consists of a series of container
                element, which contain metadata or actual content
                related to the feed. </para>
            <para>The Atom Publishing Protocol supports the following
                container elements:</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="Atom_Feed_Element">Atom
                                Feed Element</link></para>
                    </listitem>
                    <listitem>
                        <para><link
                                linkend="Atom_Entry_Element"
                                >Atom Entry Element</link></para>
                    </listitem>
                    <listitem>
                        <para><link linkend="Atom_Content-Element"
                                >Atom Content Element</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        <section xml:id="Atom_Feed_Element">
            <title>Atom Feed Element</title>
            <para>An Atom Feed element is a representation of an Atom
                    feed, including metadata about the feed, and some
                    or all of the entries associated with it. </para>
            <para>The Atom Feed element represents the top-level
                element of an Atom Feed Document. It functions as a
                container for metadata and data associated with the
                feed. Its element children consist of metadata
                elements that are followed by zero or more Atom Entry
                child elements. </para>
            <para>The following is an example of an Atom Feed
                Element:</para>
            <example>
                <title>Atom Feed Element</title>
                <programlisting language="xml"><xi:include href="./samples/AtomFeedElementExample.xml" parse="text"/></programlisting>
            </example>
        </section>
        <section xml:id="Atom_Content-Element">
            <title>Atom Content Element</title>
            <para>The Atom Content element either contains or links to
                    the content of an entry. The “type” attribute
                    specifies the MIME media type. If no “type”
                    attribute is present, the content is treated as
                    “text”. </para>
            <para>The following is an example of an Atom Content
                element:</para>
            <para>
                <example>
                    <title>Atom Content Element</title>
                <programlisting language="xml"><xi:include href="./samples/AtomContentElementExample.xml" parse="text"/></programlisting>
                </example>
            </para>
        </section>
        <section xml:id="Atom_Entry_Element">
            <title>Atom Entry Element</title>
            <para>The Atom Entry Element represents exactly one Atom
                    entry, outside of the context of an Atom feed. It
                    functions as a container for metadata and data
                    associated with the entry. This element can appear
                    as a child of the Atom Feed element, or it can
                    appear as the top-level element of a stand-alone
                    Atom Entry Document. </para>
            <para>The following is an example of an Atom Entry
                element:</para>
            <example><title>Atom Entry Element</title>
            <programlisting language="xml"><xi:include href="./samples/AtomEntryElementExample.xml" parse="text"/></programlisting>
            </example>
        </section>
        </section>
        <section xml:id="Cloud_Feeds_Workflow"><title>Cloud Feeds Workflow</title>
            <para>The following list describes the workflow of a Cloud
                Feeds transaction:</para>
            <para>
                <orderedlist>
                    <listitem>
                        <para>User sends a request to
                            create/delete/update a cloud server, cloud
                            database,cloud monitoring check,
                            etc.</para>
                    </listitem>
                    <listitem>
                        <para>The cloud product responds to the user
                            request and sends system and usage events
                            to their Atom Hopper endpoint as Atom
                            entries.</para>
                    </listitem>
                    <listitem>
                        <para>Repose logs the request, authenticates
                            the publisher or subscriber, validates the
                            entry, and sends the entry to Atom
                            Hopper.</para>
                    </listitem>
                    <listitem>
                        <para>Atom Hopper writes the entry to the
                            local database, where it will be available
                            for 8 days.</para>
                    </listitem>
                    <listitem>
                        <para>Subscribers pull entries from the feed,
                            filtering by category or receiving the
                            entire feed.</para>
                    </listitem>
                </orderedlist>
            </para></section>
    </chapter>
    <chapter xml:id="Using_the_Cloud_Feeds_API">
        <title>Using the Cloud Feeds API</title>
        <para>In this section you will learn how to use the Cloud Feeds API by going through the following steps:
        
        </para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>Add a New Atom Event to a Feed</para>
                </listitem>
                <listitem>
                    <para>Get a Feed</para>
                </listitem>
                <listitem>
                    <para>Get certain types of events from a
                        feed</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>This section assumes that you have successfully
            authenticated against the Rackspace Cloud API and obtained
            an authentication token as described in <link
                linkend="Generating_Auth_Token">Chapter 4: Generate an
                Authentication Token</link>.</para>
        <section xml:id="Create_Atom_Entry">
            <title>Add a New Atom Event in a Feed</title>
            <para>To insert a new Atom event in a feed, you need to
                make a POST request with the specified feed URL and a
                pointer to the Atom entry you'd like to submit using
                the following syntax:</para>
            <para>
                <programlisting>curl –H "X-Auth-Token: &lt;auth_token>" -H "Content-Type: application/atom+xml" -X POST https://&lt;feeds_url>/&lt;feed_name>/events –d@&lt;input_file> </programlisting>
            </para>
            <para><parameter>&lt;input_file> </parameter>specifies the
                path to a file that contains an atom entry. </para>
            <para>You can also inclue the XML entry directly in the
                payload by using the following syntax:</para>
            <para>
                <programlisting>curl –H "X-Auth-Token: &lt;auth_token>" -H "Content-Type: application/atom+xml" -X POST https://&lt;feeds_url>/&lt;feed_name>/events –d@ "&lt;payload>"</programlisting>
            </para>
            <para>If your payload content contains double quotes ("
                "), you have to implement the proper escape syntax by
                placing a backward slash \ around the item in
                quotation marks as shown in the following
                example:</para>
            <para>
                <programlisting>type=\"application/xml\"></programlisting>
            </para>
            <para>The following example shows how to add add an new
                Atom event by submitting the event directly in the
                request payload. </para>
            <programlisting language="xml"><xi:include href="./samples/reqAddNewAtomEntry.xml" parse="text"/></programlisting>
            <para>
                <important>
                    <para>When making the post request, make sure to
                        set the HTTP Header to <emphasis>Content-Type:
                            application/atom+xml </emphasis></para>
                </important>
            </para>
            <para>After you have posted the Atom XML to the correct
                Atom Hopper endpoint you should receive an HTTP 201
                (Created) response back along with the Atom XML you
                posted in the body.</para>
        </section>
        <section xml:id="Get_Atom_Entry">
            <title>Get Atom Entries that were Posted</title>
            <para>To retrieve an Atom feed or an Atom entry that was
                posted, submit a <emphasis role="bold">GET</emphasis>
                request using the following syntax:</para>
            <para>
                <programlisting>curl –H "X-Auth-Token: &lt;auth_token>" –X GET https://&lt;feeds_url>/&lt;feed_name>/events </programlisting>
            </para>
            <para>The placeholders stand for the following:</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>&lt;auth_token> is the token you obtain
                            during authentication</para>
                    </listitem>
                    <listitem>
                        <para>&lt;feeds_url> is the URL/VIP from the
                            list of Cloud Feeds endpoints as described
                            in the Service Access/Endpoints
                            section.</para>
                    </listitem>
                    <listitem>
                        <para> &lt;feed_name> is the name of the feeds
                            you are trying to fetch events for. An
                            example of feed name is: nova, servers,
                            queues, files, etc.</para>
                        
                    </listitem>
                </itemizedlist>
            </para>
            <para>The following is an example for a request for a
                feed:</para>
            <para><programlisting language="xml"><xi:include href="./samples/reqGetAtomEntry.xml" parse="text"/></programlisting></para>
       <para> The above call will return 25 of the latest events in
                Next Gen Cloud Server feed from DFW datacenter. </para>
            <para>To make the formatting of the returned events more
                readable, you can submit the following request:</para>
            <para>
                <programlisting>curl –H "X-Auth-Token: &lt;auth_token>" –X GET https://dfw.feeds.api.rackspacecloud.com/nova/events | xmllint --format -</programlisting>
            </para>
        </section>
        <section xml:id="Filter_Atom_Entries">
            <title>Get Certain Types of Events from a Feed</title>
            <para>You can use the Cloud Keep API to filter for certain
                types of events you would like to obtain from a feed.
                The following example shows how to get all event types
                that fall under the cloudsites.metered.site.usage
                category:</para>
            <para>
                <programlisting>curl –H "X-Auth-Token: &lt;auth_token>" –X GET https://ord.feeds.api.rackspacecloud.com/sites/events/?search=(cat=cloudsites.metered.site.usage)</programlisting>
            </para>
        </section>
    </chapter>
</book>
