<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!ENTITY ndash "&#x2013;">
 <!ENTITY mdash "&#x2014;">
 <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

        <!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
        <!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">
        <!ENTITY ENDPOINT-UK-20 "https://lon.identity.api.rackspacecloud.com/v2.0/">

]>
<book xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xml:id="feeds-getting-started" version="5.0-extension RaxBook-2.0">
    <title>Rackspace Cloud Feeds Getting Started Guide</title>
    <info>
        <copyright>
            <year>2014</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v1.0</releaseinfo>
        <productname>Rackspace Cloud Feeds</productname>
        <pubdate/>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the
                    template.</remark>
            </annotation>
        </legalnotice>
        <revhistory>
            <revision>
                <date>2014-01-01</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Created initial draft</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2014-04-11</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Update after tech review</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
        </revhistory>
        <raxm:metadata
            xmlns:raxm="http://docs.rackspace.com/api/metadata">
            <raxm:displayname>Getting Started Guide</raxm:displayname>
            <raxm:product version="v1.0">feeds</raxm:product>
            <raxm:priority>10</raxm:priority>
        </raxm:metadata>
    </info>
    <chapter xml:id="Feeds_Doc_Change_History">
        <title>Document change history</title>
        <para>This version of the getting started guide replaces and
            obsoletes all previous versions. The most recent changes
            are described in the table below:</para>
        <?rax revhistory?>
    </chapter>
    <chapter xml:id="Feeds_Overview">
        <title>Overview</title>
        <para>This Getting Started Guide provides an introduction of
            the Cloud Feeds product. It also teaches how to use the
            Cloud Feeds API and to perform simple API operations. In
            this document, you will learn the following:</para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>Chapter 3 describes how to send requests to
                        the Rackspace API using cURL.</para>
                </listitem>
                <listitem>
                    <para>Chapter 4 shows how to obtain an
                        authentication token to be used with the Cloud
                        Feeds API.</para>
                </listitem>
                <listitem>
                    <para>Chapter 5 provides information on how to
                        access the Cloud Feeds service through the
                        service endpoints.</para>
                </listitem>
                <listitem>
                    <para>Chapter 6 introduces general concepts about
                        Cloud Feeds, including Atom events.</para>
                </listitem>
                <listitem>
                    <para>Chapter 7 provides a set of steps on how you
                        can use the Cloud Feeds API to retrieve
                        feeds.</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>Follow the steps described in this guide to use the
            Rackspace Cloud Feeds API and programmatically access
            feeds.</para>
        <para>For details about using the Cloud Feeds API, refer to
            the <citetitle>Cloud Feeds Developer Guide</citetitle> at
                <link xlink:href="http://docs.rackspace.com/"
                >http://docs.rackspace.com/</link>.</para>
        <para>Visit our <link
                xlink:href="http://feedback.rackspacecloud.com/forums/71021-product-feedback/category/42449-cloud-databases"
                >Product Feedback Forum</link> and tell us what you
            think about Cloud Feeds.</para>
        <section xml:id="Prerequisites_Examples">
            <title>Prerequisites for running examples</title>
            <para>In order to run the examples in this guide, you must
                have the following prerequisites: <itemizedlist
                    spacing="compact">
                    <listitem>
                        <para>Rackspace Cloud account</para>
                    </listitem>
                    <listitem>
                        <para>Rackspace Cloud username and password,
                            as specified during registration</para>
                    </listitem>
                </itemizedlist></para>
        </section>
        <section xml:id="Pricing_SLA-d1e1362" security="external">
            <title>Pricing and service level</title>
            <para>Cloud Feeds is part of the Rackspace Cloud and your
                use through the API will be billed as specified in the
                pricing schedule at <link
                    xlink:href="http://www.rackspace.com/cloud/public/databases/pricing"
                    >http://www.rackspace.com/cloud/public/databases/pricing</link>. </para>
            <para>The service level agreements (SLAs) for Cloud Feeds
                and Cloud Servers are available at <link
                    xlink:href="http://www.rackspace.com/cloud/legal/sla/#cloud_databases"
                    >http://www.rackspace.com/cloud/legal/sla/#cloud_databases</link>
                and <link
                    xlink:href="http://www.rackspace.com/cloud/legal/sla"
                    >http://www.rackspace.com/cloud/legal/sla</link>.</para>
        </section>
    </chapter>
    <chapter xml:id="Feeds_Sending_API_Requests">
        <title>Sending requests to the API</title>
        <para>You have several options for sending requests through an
            API: </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para>Developers and testers might prefer to use cURL,
                    the command-line tool from <link
                        xlink:href="http://curl.haxx.se/"
                        >http://curl.haxx.se/</link>. </para>
                <para>With cURL, you can send HTTP requests and
                    receive responses back from the command line.
                </para>
            </listitem>
            <listitem>
                <para>If you like to use a more graphical interface,
                    the REST client for Firefox, also works well for
                    testing and trying out commands. See <link
                        xlink:href="https://addons.mozilla.org/en-US/firefox/addon/restclient/"
                        >https://addons.mozilla.org/en-US/firefox/addon/restclient/</link>.
                </para>
            </listitem>
            <listitem>
                <para>You can also download and install RESTclient, a
                    Java application used to test RESTful web
                    services, from <link
                        xlink:href="http://code.google.com/p/rest-client/"
                        >http://code.google.com/p/rest-client/</link>.
                </para>
            </listitem>
        </itemizedlist>
        <section xml:id="Feeds_using-curl-cli">
            <title>Sending API requests using cURL</title>
            <para>cURL is a command-line tool that is available oin
                most UNIX system-based environments and Apple Mac OS X
                systems, and can be downloaded for Microsoft Windows
                to interact with REST interfaces. For more information
                on cURL, visit <link xlink:href="http://curl.haxx.se/"
                    >http://curl.haxx.se/</link>. </para>
            <para>cURL allows you to transmit and receive HTTP
                requests and responses from the command-line or from
                within a shell script. This makes it possible to work
                with the ReST API directly without using one of the
                client APIs. </para>
            <para>The following cURL command-line options are used in
                this guide to run the examples.</para>
            <para>
                <table>
                    <caption>cURL Command-Line Options</caption>
                    <col width="31%"/>
                    <col width="69%"/>
                    <thead>
                        <tr>
                            <th>Option</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><option>-d</option></td>
                            <td>Sends the specified data in a POST
                                request to the HTTP server</td>
                        </tr>
                        <tr>
                            <td><option>-i</option></td>
                            <td>Includes the HTTP header in the
                                output.</td>
                        </tr>
                        <tr>
                            <td><option>-H HEADER</option></td>
                            <td>Specifies an HTTP header in the
                                request.</td>
                        </tr>
                        <tr>
                            <td><option>-X</option></td>
                            <td>Specifies the request method to use
                                when communicating with the HTTP
                                server.The specified request is used
                                instead of the default method, which
                                is GET. For example, <option>-X
                                   PUT</option> specifies to use the
                                PUT request method.</td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para>
                <note>
                    <para>If you have the tools, you can run the cURL
                        JSON request examples with the following
                        options to format the output from cURL:
                            <emphasis role="bold">&lt;curl JSON
                            request example&gt; | python
                            -mjson.tool</emphasis>.</para>
                </note>
            </para>
            <para>To run the cURL request examples shown in this guide
                on Linux or Mac systems, perform the following
                actions:</para>
            <para>
                <orderedlist>
                    <listitem>
                        <para> Copy each example from the HTML version
                            of this guide an paste it into an ASCII
                            text editor (for example, vi or TextEdit).
                        </para>
                    </listitem>
                    <listitem>
                        <para> Modify each example with your required
                            account information and other information,
                            as detailed in this guide.</para>
                        <para>
                            <note>
                                <para>The carriage returns in the cURL
                                   request examples that are part of
                                   the cURL syntax are escaped with a
                                   backslash ('\') in order to avoid
                                   prematurely terminating the
                                   command. However you should not
                                   escape carriage returns inside the
                                   xml or json message within the
                                   command.</para>
                            </note>
                        </para>
                        <para>Consider the following cURL Authenticate
                            Request: XML example that is described in
                            detail in <xref
                                linkend="Generating_Auth_Token"
                            />:</para>
                        <example>
                            <title>cURL authentication request:
                                XML</title>
                            <?dbfo keep-together="always"?>
                            <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'&lt;?xml version="1.0" encoding="UTF-8"?>
 &lt;auth&gt;   
    &lt;apiKeyCredentials     
        xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"     
        username="<emphasis role="italic">yourUserName</emphasis>"     
        apiKey="<emphasis role="italic">yourApiKey</emphasis>"/&gt;   
 &lt;/auth&gt;<option>'</option> \
<uri security="external">'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri>
<uri security="internal">'https://staging.identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
                        </example>
                        <para>The lines that are part of the cURL
                            command syntax have been escaped with a
                            backslash ('\') to indicate that the
                            command continues on the next line:</para>
                        <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
  
   
(... lines within the xml portion of the message are not shown in this example)
(... the example only shows lines that are part of cURL syntax)     
     

   
 &lt;/auth&gt;<option>'</option> \
<uri security="external">'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri>
<uri security="internal">'https://staging.identity.api.rackspacecloud.com/v2.0/tokens'</uri>
                        </screen>
                        <para>However the lines
                                <emphasis>within</emphasis> the xml
                            portion of the message are
                                <emphasis>not</emphasis> escaped with
                            a backslash ('\') in order to avoid issues
                            with the xml processing:</para>
                        <screen language="bash">'&lt;?xml version="1.0" encoding="UTF-8"?>
 &lt;auth&gt;   
    &lt;apiKeyCredentials     
        xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"     
        username="<emphasis role="italic">yourUserName</emphasis>"     
        apiKey="<emphasis role="italic">yourApiKey</emphasis>"/&gt;   
 &lt;/auth&gt;<option>'</option> \
</screen>
                        <para>The final line of the xml message is
                            escaped since the backslash lies
                                <emphasis>outside</emphasis> the xml
                            message and continues the cURL command to
                            the next line.</para>
                    </listitem>
                    <listitem>
                        <para>After you are finished modifying the
                            text for the cURL request example with
                            your information (for example <emphasis
                                role="italic">yourUserName</emphasis>
                            and <emphasis role="italic"
                                >yourApiKey</emphasis>), paste it into
                            your terminal window. Then execute the
                            cURL command by pressing
                                <guilabel>Enter</guilabel>.</para>
                        <para>If you have trouble copying and pasting
                            the examples as described, try typing the
                            entire example on one long line, removing
                            all the backs.</para>
                    </listitem>
                    <listitem>
                        <para>Press <guilabel>Enter</guilabel> to run
                            the cURL command.</para>
                    </listitem>
                </orderedlist>
            </para>
        </section>
    </chapter>
    <chapter xml:id="Generating_Auth_Token">
        <title>Generating an authentication token</title>
        <para>Whether you use cURL or a REST client to interact with
            the Cloud Feeds API, you must generate an authentication
            token. You provide this token in the X-Auth-Token header
            in each Cloud Feeds API request. </para>
        <para>Examples 4.1 and 4.2 demonstrate how to use cURL to
            obtain the authentication token and your account number.
            You must provide both when making subsequent Cloud Feeds
            API requests.</para>
        <para>Remember to replace the placeholder names in the
            following authentication request examples with your
                information:<itemizedlist spacing="compact">
                <listitem>
                    <para security="external"><emphasis role="italic"
                            >yourUserName</emphasis> &mdash; Your
                        common Rackspace Cloud username, as supplied
                        during registration.</para>
                    <para security="internal"><emphasis role="italic"
                        >yourUserName</emphasis> &mdash; Your
                        common Cloud username as supplied to you.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="italic"
                            >yourApiKey</emphasis> &mdash; Your API
                        access key.</para>
                        <para security="external"> You can obtain the key from the
                        Rackspace <link
                            xlink:href="http://mycloud.rackspace.com/"
                            >Cloud Control Panel</link>) by accessing
                        selecting <emphasis role="bold">Account
                            Settings</emphasis> from the <emphasis
                            role="italic">yourAccount</emphasis> menu
                        in the top-right corner of the window.</para>
                </listitem>
            </itemizedlist></para>
        <para security="internal">
            You can use either of the following endpoints to access the authentication service, depending whether you use a staging or a production environment:
        </para>
        <itemizedlist spacing="compact" security="internal">
            <listitem>
                <para>https://staging.identity.api.rackspacecloud.com/v2.0/</para></listitem>
            <listitem>
                <para>https://identity-internal.api.rackspacecloud.com/v2.0/</para>
            </listitem>
        </itemizedlist>
        <para security="external"> You can use either of the following endpoints to access
            the Authentication Service, regardless of US or UK
            identities: </para>
        <itemizedlist spacing="compact" security ="external">
            <listitem>
                <para><link xlink:href="&ENDPOINT-US-20;"
                        >&ENDPOINT-US-20;</link></para></listitem>
            <listitem>
                <para><link xlink:href="&ENDPOINT-UK-20;"
                        >&ENDPOINT-UK-20;</link></para>
            </listitem>
        </itemizedlist>
        <para security="external"> Your account might be based in either the US or the UK;
            this is not determined by your physical location but by
            the location of the Rackspace retail site which was used
            to create your account: </para>
        <itemizedlist spacing="compact" security="external">
            <listitem>
                <para> If your account was created via <link
                        xlink:href="http://www.rackspacecloud.com"
                        >http://www.rackspacecloud.com</link>, it is a
                    US-based account. </para>
            </listitem>
            <listitem>
                <para> If your account was created via <link
                        xlink:href="http://www.rackspace.co.uk"
                        >http://www.rackspace.co.uk</link>, it is a
                    UK-based account. </para>
            </listitem>
        </itemizedlist>
        <para security="external">Notice that you authenticate by using a special URL for
            the Cloud authentication service. For example, you may use
                <code>https://identity.api.rackspacecloud.com/v2.0/tokens</code>
            as shown in the following Authenticate Request examples.
            Note that the <code>v2.0</code> component in the URL
            indicates that you are using version 2.0 of the Cloud
            Authentication API.</para>
        <para security="internal">Notice that you authenticate by
            using a special URL for the Cloud authentication service.
            For example, you may use
                <code>https://staging.identity.api.rackspacecloud.com/v2.0/tokens</code>
            or
                <code>https://identity-internal.api.rackspacecloud.com/v2.0/tokens</code>
            as shown in the following Authenticate Request examples.
            Note that the <code>v2.0</code> component in the URL
            indicates that you are using version 2.0 of the Cloud
            Authentication API.</para>
        <note security="external">
            <para>For UK-based accounts, you may decide to use
                    <code>'https://lon.identity.api.rackspacecloud.com/v2.0/tokens'</code>
                instead.</para>
        </note>
        <note security="internal">
            <para>For UK-based accounts, you may decide to use
                    <code>'https://lon.identity-internal.api.rackspacecloud.com/v2.0/tokens'</code>
                or
                    <code>'https://lon.staging.identity.api.rackspacecloud.com/v2.0/tokens'</code>
                instead.</para>
        </note>
        <example security="external">
            <title>cURL authenticate request: XML</title>
            <?dbfo keep-together="always"?>
            <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;auth>
   &lt;apiKeyCredentials
      xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"
         username="<replaceable>yourUserName</replaceable>"
         apiKey="<replaceable>yourApiKey"</replaceable>/>
&lt;/auth>' \
<option>-H 'Content-Type: application/xml'</option> \
<option>-H 'Accept: application/xml'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
        </example>
        <example security="internal">
            <title>cURL authenticate request: XML</title>
            <?dbfo keep-together="always"?>
            <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;auth>
   &lt;apiKeyCredentials
      xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"
         username="<replaceable>yourUserName</replaceable>"
         apiKey="<replaceable>yourApiKey"</replaceable>/>
&lt;/auth>' \
<option>-H 'Content-Type: application/xml'</option> \
<option>-H 'Accept: application/xml'</option> \
<uri>'https://staging.identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
        </example>
        <example security="external">
            <title>cURL authenticate request: JSON</title>
            <?dbfo keep-together="always"?>
            <screen language="bash">curl -s https://identity.api.rackspacecloud.com/v2.0/tokens -X 'POST' \
     -d '{"auth":{"RAX-KSKEY:apiKeyCredentials":{"username":"<replaceable>yourUserName</replaceable>",
        "apiKey":"<replaceable>yourApiKey</replaceable>"}}}' \ 
     <emphasis role="bold">-H "Content-Type:
        application/json" | python -m json.tool </emphasis></screen>
        </example>
        <example security="internal">
            <title>cURL authenticate request: JSON</title>
            <?dbfo keep-together="always"?>
            <screen language="bash">curl -s https://staging.identity.api.rackspacecloud.com/v2.0/tokens -X 'POST' \
     -d '{"auth":{"RAX-KSKEY:apiKeyCredentials":{"username":"<replaceable>yourUserName</replaceable>",
        "apiKey":"<replaceable>yourApiKey</replaceable>"}}}' \ 
     <emphasis role="bold">-H "Content-Type:
        application/json" | python -m json.tool </emphasis></screen>
        </example>
        <para>The authentication token <code>id</code> is returned
            along with an <code>expires</code> attribute that
            specifies when the token expires. </para>
        <note>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>The values that you receive in your
                        responses vary from the examples shown in this
                        document because they are specific to your
                        account.</para>
                </listitem>
                <listitem>
                    <para>The information shown in the authentication
                        response examples above is for US-based
                        accounts. If you authenticate against the
                        UK-endpoint for authorization service, you see
                        the service catalog information for UK-based
                        accounts.</para>
                </listitem>
                <listitem>
                    <para> The <code>expires</code> attribute denotes
                        the time after which the token will
                        automatically expire. A token may be manually
                        revoked before the time identified by the
                        expires attribute; <code>expires</code>
                        predicts a token's maximum possible lifespan
                        but does not guarantee that it will reach that
                        lifespan. Clients are encouraged to cache a
                        token until it expires.</para>
                </listitem>
                <listitem>
                    <para>Applications should be designed to
                        re-authenticate after receiving a 401
                        (Unauthorized) response from a service
                        endpoint.</para>
                </listitem>
            </itemizedlist>
        </note>
        <para>The actual account number is located after the final
            slash (/) in the <code>publicURL</code> field. In the
            following examples, the account number is 1100111. You
            must specify your account number on most of the Cloud
            Feeds API operations, wherever you see the placeholder
                <emphasis role="bold">tenant id</emphasis> specified
            in the examples in this guide.</para>
        <para>After authentication, you can use cURL to perform &GET;
            and &POST; requests for the Cloud Feeds API.</para>
    </chapter>
    <chapter xml:id="Service_Access_Endpoints-d1e753">
        <title>Service endpoints</title>
        <para security="external">The following table summarizes the endpoints to use for
            your Cloud Feeds API calls.</para>
        <para>
            <table rules="all" security="external">
                <caption>Regionalized service endpoints</caption>
                <col width="11%"/>
                <col width="11%"/>
                <col width="16%"/>
                <col width="16%"/>
                <col width="16%"/>
                <col width="16%"/>
                <col width="16%"/>
                <thead>
                    <tr align="center">
                        <td colspan="2">Region</td>
                        <td colspan="5">Endpoint</td>
                    </tr>
                </thead>
                <tbody>
                    <tr align="left">
                        <td colspan="2">Chicago (ORD)</td>
                        <td colspan="5"
                                ><code>https://ord.feeds.api.rackspacecloud.com/&lt;feed
                                >/&lt;tenant id></code></td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">Dallas/Ft. Worth (DFW)</td>
                        <td colspan="5"
                                ><code>https://dfw.feeds.api.rackspacecloud.com/&lt;feed>/&lt;tenant
                                id></code></td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">Northern Virginia</td>
                        <td colspan="5"
                                ><code>https://iad.feeds.api.rackspacecloud.com/&lt;feed>/&lt;tenant
                                id></code></td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">London (LON)</td>
                        <td colspan="5"
                                ><code>https://lon.feeds.api.rackspacecloud.com/&lt;feed>/&lt;tenant
                                id></code></td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">Sydney (SYD)</td>
                        <td colspan="5">
                            <code>https://syd.feeds.api.rackspacecloud.com/&lt;feed>/&lt;tenant
                                id></code></td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">Hong Kong (HKG)</td>
                        <td colspan="5">
                            <code>https://hkg.feeds.api.rackspacecloud.com/&lt;feed>/&lt;tenant
                                id></code></td>
                    </tr>
                </tbody>
            </table></para>
            <para security="external">Replace &lt;tenant id> with your actual account
            number returned as part of the authentication response.
            Use your actual account number wherever you see the
            placeholder &lt;tenant id> specified in this guide. </para>
        <note security="internal">
            <itemizedlist>
                <listitem>
                    <para>Choose the endpoint for the data center
                        where your Cloud resources are located.</para>
                </listitem>
                <listitem>
                    <para>The Cloud Server that you use must be
                        located in the same datancenter where your
                        database resides.</para>
                </listitem>
                <listitem>
                    <para>All examples in this guide assume that you
                        are operating against the DFW data center,
                        however, if you are using a different
                        datacenter, be sure to use the associated
                        endpoint from the table instead.</para>
                </listitem>
            </itemizedlist>
        </note>
        <para security="internal">The following table summarizes the
            endpoints for a staging environment to use for your Cloud Feeds API calls. </para>
        <para>
            <table security="internal">
                <caption>Staging service endpoints </caption>
                <thead>
                    <tr align="center">
                        <td colspan="2">Region</td>
                        <td colspan="5">Endpoint</td>
                    </tr>
                </thead>
                <tbody>
                    <tr align="left">
                        <td colspan="2">US</td>
                        <td colspan="5"
                                ><code>https://atom.staging.ord1.us.ci.rackspace.net/&lt;feed></code>
                        </td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">UK</td>
                        <td colspan="5"
                                ><code>https://atom.staging.ord1.uk.ci.rackspace.net/&lt;feed></code></td>
                    </tr>
                </tbody>
            </table>
        </para>
        <para security="internal">The following table summarizes the
            endpoints for a production enviroment for your Cloud Feeds API calls. </para>
        <para>
            <table security="internal">
                <caption>Production service endpoints </caption>
                <thead>
                    <tr align="center">
                        <td colspan="2">Region</td>
                        <td colspan="5">Endpoint</td>
                    </tr>
                </thead>
                <tbody>
                    <tr align="left">
                        <td colspan="2">Chicago (ORD)</td>
                        <td colspan="5"
                                ><code>https://atom.prod.ord1.us.ci.rackspace.net/&lt;feed></code></td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">Dallas/Ft. Worth (DFW)</td>
                        <td colspan="5"
                                ><code>https://atom.prod.dfw1.us.ci.rackspace.net/&lt;feed></code></td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">Northern Virginia IAD)</td>
                                <td colspan="5"
                                ><code>https://atom.prod.iad3.us.ci.rackspace.net/&lt;feed></code></td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">London (LON)</td>
                        <td colspan="5"
                                ><code>https://atom.prod.lon1.uk.ci.rackspace.net/&lt;feed></code></td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">Sydney (SYD)</td>
                        <td colspan="5"
                                ><code>https://atom.prod.syd2.us.ci.rackspace.net/&lt;feed></code></td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">Hong Kong (HKG)</td>
                        <td colspan="5"
                                ><code>https://atom.prod.hkg1.us.ci.rackspace.net/&lt;feed></code></td>
                    </tr>
                </tbody>
            </table>
        </para>
    </chapter>
    <chapter xml:id="Concepts">
        <title>Cloud feeds concepts</title>
        <para>Cloud Feeds uses AtomPub to publish different types of
            feeds. Feeds are composed of a number of items called
                <emphasis role="italic">entries</emphasis>. Each entry
            has an extensible set of attached metadata. </para>
        <para>The AtomPub together with the Atom Syndication Format
            (ASF) provides a format for implementing web feeds. Web
            feeds provide users with frequently updated content.
            AtomPub is based on HTTP transfer of Atom-formatted
            representations. The Atom format is documented in the Atom
            Syndication Format.</para>
        <para>Cloud Feeds is an open-source AtomPub server for
            accessing, processing, and aggregating Atom entries. Cloud
            Feeds was designed to make it easy to build both
            generalized and specialized persistence mechanisms for
            Atom XML data, based on the Atom Syndication Format and
            the Atom Publishing Protocol.</para>
        <para>Cloud Feeds works the following way:</para>
        <para>
            <orderedlist>
                <listitem>
                    <para>Events are generated by a publisher and
                        added to the database as entries. Events can
                        be usage events, system events or billing
                        events.</para>
                </listitem>
                <listitem>
                    <para>Entries exist in Cloud Feeds for three days.
                        After that time period they are
                        deleted.</para>
                </listitem>
            </orderedlist>
        </para>
        <para>To read the official documentation for the Atom
            Syndication Format, see <link
                xlink:href="http://tools.ietf.org/search/rfc4287#section-4.1"
                >RFC 4287</link>. For more information about AtomPub,
            visit <link xlink:href="http://atompub.org/"
                >http://atompub.org/</link>.</para>
        <section xml:id="Container_Elements">
            <title>Container elements</title>
            <para>An Atom feed consists of a series of container
                elements, which contain metadata or actual content
                related to the feed. </para>
            <para>The Atom Publishing Protocol supports the following
                container elements:</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="Atom_Feed_Element">Atom
                                feed element</link></para>
                    </listitem>
                    <listitem>
                        <para><link linkend="Atom_Entry_Element">Atom
                                entry element</link></para>
                    </listitem>
                    <listitem>
                        <para><link linkend="Atom_Content-Element"
                                >Atom content element</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <section xml:id="Atom_Feed_Element">
                <title>Atom feed element</title>
                <para>An Atom Feed element is a representation of an
                    Atom feed, including metadata about the feed, and
                    some or all of the entries associated with it. </para>
                <para>The Atom Feed element represents the top-level
                    element of an Atom Feed Document. It functions as
                    a container for metadata and data associated with
                    the feed. Its element children consist of metadata
                    elements that are followed by zero or more Atom
                    Entry child elements. </para>
                <para>Following is an example of an entire Atom Feed
                    element.</para>
                <example>
                    <title>Atom feed element</title>
                    <programlisting language="xml"><xi:include href="./samples/AtomFeedElementExample.xml" parse="text"/></programlisting>
                </example>
            </section>
            <section xml:id="Atom_Entry_Element">
                <title>Atom entry element</title>
                <para>The Atom Entry element represents exactly one
                    Atom entry, outside of the context of an Atom
                    feed. It functions as a container for metadata and
                    data associated with the entry. This element can
                    appear as a child of the Atom Feed element, or it
                    can appear as the top-level element of a
                    stand-alone Atom Entry Document. </para>
                <para>Following is an example of an Atom Entry
                    element.</para>
                <example>
                    <title>Atom entry element</title>
                    <programlisting language="xml"><xi:include href="./samples/AtomEntryElementExample.xml" parse="text"/></programlisting>
                </example>
            </section>
            <section xml:id="Atom_Content-Element">
                <title>Atom content element</title>
                <para>The Atom Content element either contains or
                    links to the content of an entry. The type
                    attribute specifies the MIME media
                        <parameter>type</parameter>. If no
                        <parameter>type</parameter> attribute is
                    present, the content is treated as
                        <parameter>text</parameter>. </para>
                <para>Following is an example of an Atom Content
                    element.</para>
                <para>
                    <example>
                        <title>Atom content element</title>
                        <programlisting language="xml"><xi:include href="./samples/AtomContentElementExample.xml" parse="text"/></programlisting>
                    </example>
                </para>
            </section>

        </section>
        <section xml:id="Usage_and_System_Event_Messages-d1e1362">
            <title>Cloud feeds product events</title>
            <para>Cloud Feed places product events inside the Atom
                Content element. For example, the <tag>event</tag>
                element contains the product events (in this case for
                Cloud Backup product). </para>
            <example>
                <title>Cloud backup event information</title>
                <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;?atom feed="backup/events"?> &lt;!-- ignore &lt;?atom..?>, used for testing -->
&lt;atom:entry xmlns="http://docs.rackspace.com/core/event"
            xmlns:cb-bin="http://docs.rackspace.com/usage/cloudbackup/bandwidthIn"
            xmlns:atom="http://www.w3.org/2005/Atom">
    &lt;atom:content type="application/xml">
       <emphasis role="bold"> &lt;event endTime="2012-06-15T10:19:52Z" startTime="2012-06-14T10:19:52Z"
               region="DFW" dataCenter="DFW1" type="USAGE"
               id="8d89673c-c989-11e1-895a-0b3d632a8a89"
               resourceId="3863d42a-ec9a-11e1-8e12-df8baa3ca440"
               tenantId="1234" version="1">
            &lt;cb-bin:product version="1" serviceCode="CloudBackup"
                            serverID="944576fa-ec99-11e1-bb8e-ebb21b47fa86"
                            bandwidthIn="192998" resourceType="AGENT"/>
        &lt;/event></emphasis>
    &lt;/atom:content>
&lt;/atom:entry></programlisting>
            </example>
            <para>
                <note>
                    <para>Cloud Feeds evaluates all product events
                        against their XML schemas. </para>
                </note>
            </para>
        </section>
    </chapter>
    <chapter xml:id="Using_the_Cloud_Feeds_API">
        <title>Using the Cloud Feeds API</title>
        <para>This section uses the following steps to explain how to
            use the Cloud Feeds API:</para>
        <para>
            <itemizedlist>
                <listitem security="internal">
                    <para><link linkend="Create_Atom_Entry">Add a new
                            Atom event to a feed</link></para>
                </listitem>
                <listitem>
                    <para><link linkend="Get_Atom_Entry">Reading a
                            feed</link></para>
                </listitem>
                <listitem>
                    <para><link linkend="Filter_Atom_Entries">Get
                            certain types of events from a
                        feed</link></para>
                </listitem>
            </itemizedlist>
        </para>
        <para>This section assumes that you have successfully
            authenticated against the Rackspace Cloud API and obtained
            an authentication token as described in <link
                linkend="Generating_Auth_Token">Chapter 4: Generate an
                Authentication Token</link>. Please make sure to
            record the token because you need it to complete the
            exercises in this chapter.</para>
        <section xml:id="Create_Atom_Entry" security="internal">
            <title>Adding a new Atom event in a feed</title>
            <para>To insert a new Atom event in a feed you first need
                to create an Atom entry and save it in the same
                directory where you are making your request
                from.</para>
            <para>You then make a <methodname>POST</methodname>
                request with the specified feed URL and a pointer to
                the Atom entry you want to submit using the following
                syntax:</para>
            <para>
                <programlisting>curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" -H "Content-Type: application/atom+xml" -X POST https://<replaceable>endpointURL</replaceable>/<replaceable>feedName</replaceable>/events –d@<replaceable>inputFile </replaceable></programlisting>
            </para>
            <para>&lt;<emphasis role="italic">inputFile</emphasis>>
                specifies the path to a file that contains an atom
                entry. </para>
            <para>You also need to specify the request payload in a
                separate file using xml format. </para>
            <para>The following example shows what a payload for an
                Atom entry can look like. </para>
            <programlisting language="xml"><xi:include href="./samples/reqAddNewAtomEntry.xml" parse="text"/></programlisting>
            <para>The following example shows how to add a new Atom
                entry by providing a pointer to the entry:</para>
            <para>
                <programlisting>curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" -H "Content-Type: application/atom+xml" -X POST https://atom.staging.ord1.us.ci.rackspace.net/files/events –d@./cloudfiles-bandwidth-usage.xml</programlisting>
            </para>
            <para>You can also include the XML entry directly in the
                payload by using the following syntax:</para>
            <para>
                <programlisting>curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" -H "Content-Type: application/atom+xml" -X POST https://<replaceable>endpointURL</replaceable>/<replaceable>feedName</replaceable>/events –d "<replaceable>payload</replaceable>"</programlisting>
            </para>
            <para>
                <important>
                    <para>When making the post request, make sure to
                        set the HTTP Header to <emphasis>Content-Type:
                            application/atom+xml </emphasis></para>
                </important>
            </para>
            <para>After you have successfully posted the Atom XML to
                the correct Atom Hopper endpoint you will receive an
                    <code>HTTP 201</code> status code as a response.
                The response body also contains the Atom XML you
                posted in the request body as shown in the following
                example:</para>
            <programlisting language="xml"><xi:include href="./samples/resAddNewAtomEntry.xml" parse="text"/></programlisting>
        </section>
        <section xml:id="Get_Atom_Entry">
            <title>Reading a feed</title>
            <para>To retrieve an Atom feed or an Atom entry that was
                posted, submit a <methodname>GET</methodname> request
                using the following syntax:</para>
            <para>
                <programlisting security="external">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://<replaceable>endpointURL</replaceable>/<replaceable>feedName/</replaceable>events/<replaceable>tenantID</replaceable></programlisting>
                <programlisting security="internal">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://<replaceable>endpointURL</replaceable>/<replaceable>feedName/</replaceable>events</programlisting>
            </para>
            <para>The placeholders are defined in the following
                table.</para>
            <para>
                <table>
                    <caption>Syntax elements</caption>
                    <col width="11%"/>
                    <col width="9%"/>
                    <col width="22%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <thead>
                        <tr align="left">
                            <td colspan="2">Placeholder</td>
                            <td colspan="5">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr align="left">
                            <td colspan="2"><emphasis role="italic"
                                   >authenticationToken</emphasis></td>
                            <td colspan="5">Specifies the token that
                                you obtain during authentication.</td>
                        </tr>
                        <tr align="left">
                            <td colspan="2"><emphasis role="italic"
                                   >endpointURL</emphasis></td>
                            <td colspan="5">Specifies the URL/VIP that
                                was obtained from the list of Cloud
                                Feeds endpoints.</td>
                        </tr>
                        <tr align="left">
                            <td colspan="2"><emphasis role="italic"
                                   >feedName</emphasis></td>
                            <td colspan="5">Specifies he name of the
                                feeds you are trying to fetch events
                                for. An example of feed name is: nova,
                                servers, queues, files, etc.</td>
                        </tr>
                        <tr align="left" security="external">
                            <td colspan="2"><emphasis role="italic"
                                >tenantID</emphasis></td>
                            <td colspan="5">Specifies the tenantID for the given tenant.</td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para>The following is an example for a request for a
                feed:</para>
            <para>
                <programlisting security="external">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://dfw.feeds.api.rackspacecloud.com/nova/events/<replaceable>tenantID</replaceable></programlisting>
                <programlisting security="internal">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://atom.staging.ord1.us.ci.rackspace.net/nova/events</programlisting>
            </para>
            <para>This request returns 25 of the latest events in the
                Next Generation Cloud Server feed from the DFW data
                center. To make the formatting of the returned events
                more readable, you can submit the following
                request:</para>
            <para>
                <programlisting security="external">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://dfw.feeds.api.rackspacecloud.com/nova/events/<replaceable>tenantID</replaceable> | xmllint --format -</programlisting>
                <programlisting security="internal">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://atom.staging.ord1.us.ci.rackspace.net/nova/events | xmllint --format -</programlisting>
            </para>
        </section>
        <section xml:id="Filter_Atom_Entries">
            <title>Using query parameters to filter for certain
                events</title>
            <para>You can use query parameters to filter for certain
                events within a feed. Query parameters are part of the
                URL that is being passed to the server as part of an
                API request. When you add query parameters to an API
                request, you modify the results in ways such as
                refining your query, applying a timestamp, sorting the
                output, or seeing only the newest results. </para>
            <para>A typical URL that contains a query parameter looks
                like the following:</para>
            <para><code>http://server/program/path/?query_string
                </code></para>
            <para>The query string is composed of one or more field
                value pairs using the following format:</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Within each field value pair, the field
                            name and value are separated by an equals
                            sign (<emphasis role="italic">
                                =</emphasis>).</para>
                    </listitem>
                    <listitem>
                        <para>The series of pairs is separated by and
                            ampersand (&amp;) as shown in the
                            following example:</para>
                        <para><code>field1=value1&amp;field2=value2&amp;field3=value3...</code></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>The following table summarizes query parameters you
                can specify for Cloud Feeds:</para>
            <para>
                <table>
                    <caption>Query parameters</caption>
                    <col width="13%"/>
                    <col width="39%"/>
                    <col width="12%"/>
                    <col width="36%"/>
                    <thead>
                        <tr>
                            <th>Query parameter</th>
                            <th>Description</th>
                            <th>Data type</th>
                            <th>Acceptable values</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><parameter>marker</parameter></td>
                            <td>Specifies the unique id of an Atom
                                entry.</td>
                            <td>valid ID</td>
                            <td>none</td>
                        </tr>
                        <tr>
                            <td><parameter>direction</parameter></td>
                            <td>Specifies the direction from which to
                                return entries starting from the
                                current marker or entry.</td>
                            <td>forward | backward</td>
                            <td>forward</td>
                        </tr>
                        <tr>
                            <td><parameter>limit</parameter></td>
                            <td>Specifies the number of entries to be
                                returned. If the entered limit is
                                greater than the actual number of
                                entries, the actual number of entries
                                will be used.</td>
                            <td>1 to 1000</td>
                            <td>25</td>
                        </tr>
                        <tr>
                            <td><parameter>format</parameter></td>
                            <td>Returns the feed in a specified
                                format.</td>
                            <td>JSON</td>
                            <td>none</td>
                        </tr>
                        <tr>
                            <td><parameter>search</parameter></td>
                            <td>Allows filtering of a feed only for
                                events of a specified category.</td>
                            <td>string</td>
                            <td>none</td>
                        </tr>
                        <tr>
                            <td><parameter>startingAt</parameter></td>
                            <td>Allows filtering for a number of
                                entries that start at a specified
                                timestamp</td>
                            <td>string</td>
                            <td>Must be in ISO 8601 Date and Time
                                format, and must contain a time zone,
                                for example: 2014-03-10T06:00:00.000Z.
                                For more information, see <link
                                   xlink:href="http://en.wikipedia.org/wiki/ISO_8601"
                                   >http://en.wikipedia.org/wiki/ISO_8601</link>.</td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para>
                <note>
                    <para>The <parameter>startingAt</parameter>
                        parameter can not be used together with the
                            <parameter>marker</parameter> parameter.
                        If the <parameter>startingAt</parameter>
                        parameter is used without a
                            <parameter>direction</parameter>
                        parameter, then forward direction is
                        assumed.</para>
                </note>
            </para>
            <para>For more information, see <olink
                targetdoc="feeds-devguide"
                targetptr="Filter_Entries_by_Category_d1e1315"
                >“Filtering Entries by Categories
                ”</olink>.</para>
            <section xml:id="Filter_by_Search_Category">
                <title>Filtering by search category</title>
            <para>You can use a <methodname>GET</methodname> request
                    to filter for certain types of events you would
                    like to obtain from a feed by defining a specific
                        <emphasis role="italic">search
                        category</emphasis>. You specify the seach
                    categories by adding <parameter>search</parameter>
                    as the URL parameter at the end of the feeds URL
                    and then specifying the category or item you want
                    to search for. The following example shows how to
                    get all event types that fall under the
                        <emphasis>cloudsites.metered.site.usage</emphasis>
                    category:</para>
            <para>
                <programlisting security="external">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://ord.feeds.api.rackspacecloud.com/sites/events/<replaceable>tenantID</replaceable>/?search=(cat=cloudsites.metered.site.usage)</programlisting>
                <programlisting security="internal">curl –H "X-Auth-Token: <replaceable>authenticationToken</replaceable>" –X GET https://atom.staging.ord1.us.ci.rackspace.net/sites/events/?search=(cat=cloudsites.metered.site.usage):</programlisting>
            </para>
            </section>
            <section xml:id="Filter_by_timestamp">
                <title>Filtering by
                    timestamp<?sbr?><?sbr?><?sbr?></title>
                <para>You can use the
                        <parameter>startingAt</parameter> query
                    parameter to filter for feed entries starting at a
                    certain timestamp. The parameter takes an ISO 8601
                    Date and Time format and must contain a timezone. </para>
            <para>The following URL shows how to fetch entries with a
                    timestamp that is newer than 2014-03-10
                    00:00:00.000 UTC:</para>
            <programlisting>http://localhost:8080/namespace/feed/?startingAt=2014-03-10T00:00:00.000Z</programlisting>
            <para>The following URL shows how to fetch entries with a
                timestamp that older than 2014-03-10 00:00:00.000 UTC
                by setting the <parameter>direction</parameter>
                parameter to <emphasis role="italic"
                    >backward</emphasis>:</para>
            <programlisting>http://localhost:8080/namespace/feed/?startingAt=2014-03-10T00:00:00.000Z&amp;direction=backward</programlisting>
                </section>

        </section>
    </chapter>
    <chapter xml:id="Next_Steps">
        <title>Next steps</title>
        <para>To learn more aboud the Cloud Feeds API, read <olink
                targetdoc="cloudfeeds-devguide"
                targetptr="Using_Cloud_Feeds">Using Cloud
                Feeds</olink> in the <emphasis role="italic">Cloud
                Feeds Developer's Guide</emphasis>.</para>
        <section xml:id="Additional_Resources">
            <title>Additional resources</title>
            <para>The following lists provides links to additional
                resources about Cloud Feeds and Atom:</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link
                                xlink:href="https://github.com/rackerlabs/atom-hopper/wiki"
                                >Atom Hopper Wiki on
                            Github</link></para>
                    </listitem>
                    <listitem>
                        <para><link
                                xlink:href="https://github.com/rackerlabs/standard-usage-schemas/wiki"
                                >Standard Usages Schemas Wiki on
                                Github</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    </chapter>
</book>
